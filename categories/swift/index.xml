<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on goozenlab</title>
    <link>http://goozenlab.com/categories/swift/</link>
    <description>Recent content in Swift on goozenlab</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>goozenlab@gmail.com (jin)</managingEditor>
    <webMaster>goozenlab@gmail.com (jin)</webMaster>
    <lastBuildDate>Mon, 06 Apr 2015 19:30:00 +0545</lastBuildDate>
    <atom:link href="http://goozenlab.com/categories/swift/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>テーブルビューセルの境界線を消す</title>
      <link>http://goozenlab.com/blog/2015/04/tableview-separator/</link>
      <pubDate>Mon, 06 Apr 2015 19:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/04/tableview-separator/</guid>
      <description>&lt;p&gt;テーブルビューセルの境界線を消すには下記のコードを追加。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.tableView.separatorStyle = UITableViewCellSeparatorStyle.None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;StoryBoardを使っている時は以下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-04-06-separator.png&#34; alt=&#34;Separator&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ShakeはUIEventで</title>
      <link>http://goozenlab.com/blog/2015/03/swift-shake/</link>
      <pubDate>Fri, 27 Mar 2015 11:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/swift-shake/</guid>
      <description>&lt;p&gt;色々と書き込んでいたシェイクの判別は&lt;code&gt;UIEvent&lt;/code&gt;を使うようになります。
えらく簡単になりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    override func viewDidAppear(animated: Bool) {
        super.viewDidAppear(animated)
        self.becomeFirstResponder()
    }
    
    override func canBecomeFirstResponder() -&amp;gt; Bool {
        return true
    }
    
    override func motionEnded(motion: UIEventSubtype, withEvent event: UIEvent!) {
        if(event.subtype == UIEventSubtype.MotionShake) {
            // 
            // 処理
            //
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-26-shake-swift.png&#34; alt=&#34;swift shake&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;※まぁ、間違っちゃーいね〜な。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>performSelectorは無くなる</title>
      <link>http://goozenlab.com/blog/2015/03/performselector-timer/</link>
      <pubDate>Thu, 26 Mar 2015 10:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/performselector-timer/</guid>
      <description>&lt;p&gt;ほぼ全ての拙作のアプリでは、テーブルセルでのバーの色変更タップとアップデートは時間差を使って行っています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[NSObject cancelPreviousPerformRequestsWithTarget:self
                                         selector:@selector(notifiyUpdate)
                                           object:nil];
[self performSelector:@selector(notifiyUpdate)
           withObject:nil
           afterDelay:kUpdateCellShortInterval];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;object-cで上記に書かれた&lt;code&gt;performSelector&lt;/code&gt;はSwiftでは無くなってしまったようなので、以下のコードでは動かない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; NSObject.cancelPreviousPerformRequestsWithTarget(self, selector: notify, object: nil)
 NSObject.performSelector(notify, withObject: self, afterDelay: Interval.UpdateCell)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;幾つかの方法があるようですが、タイマーを使った方法が簡易でよいのですが、&lt;code&gt;cancelPreviousPerformRequestsWithTarget&lt;/code&gt;が無用になってしまう。処理の事前キャンセルも必要があるので、少し修正して最終的には以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private var tapTimer: NSTimer?

// 処理
cancelTimer()
tapTimer = NSTimer.scheduledTimerWithTimeInterval(Interval.UpdateCell, target: self, selector:  notify, userInfo: nil, repeats: false)
//

func cancelTimer() {
    if tappingTimer != nil {
        tappingTimer!.invalidate()
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>printlnは気楽</title>
      <link>http://goozenlab.com/blog/2015/03/println-swift/</link>
      <pubDate>Wed, 25 Mar 2015 08:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/println-swift/</guid>
      <description>&lt;p&gt;NSLogはまだ使えるようですが、swiftではprintln をログの書出しに使います。NSLogだとよく使っていた、 &lt;code&gt;__PRETTY_FUNCTION__&lt;/code&gt; は&lt;/p&gt;

&lt;p&gt;Swift では &lt;code&gt;__FILE__, __FUNCTION__, __LINE__ and __COLUMN__&lt;/code&gt; のようになります。
使えそうなのは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__FILE__&lt;/code&gt;  ：ファイル名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__LINE__&lt;/code&gt; ：ライン番号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__FUNCTION__&lt;/code&gt; ：ファンクション名&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして、値を表示したい時はそのままかそのままか&lt;code&gt;\(...)&lt;/code&gt;で囲み適当に放り込む。もはや%dや%@は必要ないらしい。
小賢しいウォーニングも出なくなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;println(__FUNCTION__, self.frame)
println(__FUNCTION__,&amp;quot;screen is \(self.frame)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;戻りは以下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(function, (0.0,706.0,414.0,30.0))
(function, screen is (0.0,706.0,414.0,30.0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swift Programming Language に書いてあるらしいので読むべ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NSDate() = [NSDate date]</title>
      <link>http://goozenlab.com/blog/2015/03/nsdate-swift/</link>
      <pubDate>Tue, 24 Mar 2015 08:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/nsdate-swift/</guid>
      <description>&lt;p&gt;NSDateでの &lt;code&gt;[NSDate date]&lt;/code&gt; はシンプルにイニシャライザーに統合され？、Swiftでは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSDate()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でよろしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[NSDate dateWithTimeIntervalSinceNow:hoursGoodSleep * 60 * 60]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を、Swiftで書いてみると、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSDate(timeIntervalSinceNow: hoursGoodSleep * 60 * 60)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーが出る。hoursGoodSleep は Float だし抜かりは無いような、、、&lt;br /&gt;
正しくは、&lt;code&gt;Double&lt;/code&gt;でエラーは消える。こうゆう所は割と厳しいのね。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ビューサイクルとアプリ復帰時の処理</title>
      <link>http://goozenlab.com/blog/2015/03/view-cycle/</link>
      <pubDate>Sat, 21 Mar 2015 12:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/view-cycle/</guid>
      <description>

&lt;p&gt;たまに、何処に何の処理を入れれば良いか分からなくなるので、簡単にまとめる。&lt;/p&gt;

&lt;h2 id=&#34;起動時:205901421f8bb17c75d7ebf5b8a21af9&#34;&gt;起動時&lt;/h2&gt;

&lt;p&gt;アプリの起動時には以下の順で呼ばれる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;viewDidLoad()&lt;/li&gt;
&lt;li&gt;viewWillAppear&lt;/li&gt;
&lt;li&gt;viewDidAppear　※すべての画像の処理が終わった後に呼ばれる。あまり使っていない。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;モーダルビューより復帰:205901421f8bb17c75d7ebf5b8a21af9&#34;&gt;モーダルビューより復帰&lt;/h2&gt;

&lt;p&gt;モーダルビューより戻ってくると以下の処理が再び呼ばれる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;viewWillAppear&lt;/li&gt;
&lt;li&gt;viewDidAppear&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ロック-スリープからの復帰時:205901421f8bb17c75d7ebf5b8a21af9&#34;&gt;ロック・スリープからの復帰時&lt;/h2&gt;

&lt;p&gt;ロック・スリープからの復帰は処理が行われない（厳密には、AppDelegate内では呼ばれる）ので、アプリの戻ってきた時の処理を追加する。
viewDidLoadに通知の設定する事で可能になる。&lt;code&gt;Setting.bundle&lt;/code&gt;でフォントの設定等を変更し、アプリに戻ってきた時に使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Notification Center
let app: UIApplication = UIApplication.sharedApplication()
NSNotificationCenter.defaultCenter().addObserver(self, 
        selector: &amp;quot;applicationWillEnterForeground:&amp;quot;, name: UIApplicationWillEnterForegroundNotification, 
        object: app)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と処理を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func applicationWillEnterForeground(notification: NSNotification) {
    println(__FUNCTION__)
    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;スリープに移行時:205901421f8bb17c75d7ebf5b8a21af9&#34;&gt;スリープに移行時&lt;/h2&gt;

&lt;p&gt;逆にスリープに入る時には復帰時と同じで、&lt;code&gt;ApplicationWillEnterForeground&lt;/code&gt; の代わりに &lt;code&gt;ApplicationDidEnterBackground&lt;/code&gt; を使えば良い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; NSNotificationCenter.defaultCenter().addObserver(self, selector: &amp;quot;applicationDidEnterBackground:&amp;quot;, name: UIApplicationDidEnterBackgroundNotification, object: app)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>クラスが読み込めず [解決]</title>
      <link>http://goozenlab.com/blog/2015/03/load-managedobject/</link>
      <pubDate>Fri, 20 Mar 2015 10:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/load-managedobject/</guid>
      <description>

&lt;p&gt;もう、わざわざ動いている物をSwiftに移行するのも止めてしまおうか。どうせならAndroidに移植する方がまだよいか、、と思ってしまうほどでしたが、&lt;a href=&#34;http://goozenlab.com/blog/2015/03/unable-to-load-class/&#34;&gt;クラスが読み込めず&lt;/a&gt;で書いた問題が解決しました。&lt;/p&gt;

&lt;p&gt;問題のエラーログ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CoreData: warning: 
Unable to load class named &#39;Item&#39; for entity &#39;Item&#39;.  
Class not found, using default NSManagedObject instead.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もしかしたらXcode6.2では問題でなくなっているかもしれませんが、とりあえず解決方法は以下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-20-class-unload1.png&#34; alt=&#34;Class unload1&#34; /&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;xcdatamodeldファイルを選択&lt;/li&gt;
&lt;li&gt;CONFIGURATIONSを選択&lt;/li&gt;
&lt;li&gt;右に出てくるEntitiies以下のClass名を&lt;code&gt;ディレクトリー名.Entity名&lt;/code&gt;にする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-20-class-unload2.png&#34; alt=&#34;Class unload2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;※ 注意点は上記の場合&lt;code&gt;kitchen.Item&lt;/code&gt;では無く&lt;code&gt;tapas.Item&lt;/code&gt;と、xcdatamodeld名では無く、ディレクトリ名を入れる事。見事にハマりました。&lt;br /&gt;
（散歩中に「もしや、ディレクトリー名では。。」と閃きました。なんでわざわざ&lt;code&gt;kitchen.xcdatamodeld&lt;/code&gt;という名前にしているのかは、自分で作ったのに不明。なんで余計な事をする？と自分に問い詰めたい。。）&lt;/p&gt;

&lt;h2 id=&#34;うまく行かない場合:dada94b1ca17e9c7da1ee195804dcefb&#34;&gt;うまく行かない場合&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;キャッシュをクリアーする&lt;/li&gt;
&lt;li&gt;DerivedDataのデーターを消す&lt;/li&gt;
&lt;li&gt;新しいプロジェクトを作って、Modelを移行して試す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;※ 使っていたプロジェクトのままで動いた場合と（tapas)、キャッシュやDerivedDataのデーターを抜いてもうまく行かず、新しいプロジェクトを作り直してうまく行く場合がありました（ohaYo)。&lt;/p&gt;

&lt;p&gt;蛇足：ネットでぱっと見て試すもうまく行かず、後で読み返すとその注意点が書いてあったりします。
小学校の通信簿に「少し聞いただけで、全部理解したと思ってしまうところがあります。もう少しじっくりと。（やれどーだこーだ）。」書いてあった事をふと思い出す。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NSLocalizedString on swift</title>
      <link>http://goozenlab.com/blog/2015/03/nslocalizedstring-swift/</link>
      <pubDate>Thu, 19 Mar 2015 11:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/nslocalizedstring-swift/</guid>
      <description>&lt;p&gt;NSLocalizedStringでエラーがでる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSLocalizedString(&amp;quot;Timer&amp;quot;, comment: nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nil&lt;/code&gt;を&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;空白に変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSLocalizedString(&amp;quot;NavigationBar.Button.Timer&amp;quot;, comment: &amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swiftではnilの扱いがちょっと掴めず、、至る所で問題になってる。。&lt;/p&gt;

&lt;p&gt;ついでに中に入れる文言をかえる。以前は普通に&lt;code&gt;&amp;quot;Timer&amp;quot;&lt;/code&gt;と書いていたところを今回からはドコゾの何某か分かるように&lt;code&gt;&amp;quot;NavigationBar.Button.Timer&amp;quot;&lt;/code&gt;と少し詳しく書き込むようにする。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>delegate on swift</title>
      <link>http://goozenlab.com/blog/2015/03/delegate-swift/</link>
      <pubDate>Wed, 18 Mar 2015 11:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/delegate-swift/</guid>
      <description>

&lt;h2 id=&#34;デレゲートするクラス:b75dbc75cf3a32d046705843360e6789&#34;&gt;デレゲートするクラス&lt;/h2&gt;

&lt;p&gt;以下の３つを書き加えればよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol MainHeaderViewDelegate {
    func sleepingTimerDidFinish(controller: MainHeaderView)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;var delegate:MainHeaderViewDelegate? = nil
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; self.delegate!.sleepingTimerDidFinish(self)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;デレゲートで値を受け取るクラス:b75dbc75cf3a32d046705843360e6789&#34;&gt;デレゲートで値を受け取るクラス&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MainHeaderViewDelegate&lt;/code&gt; と、functionを追加、処理を書き込みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MainViewController: UIViewController, MainHeaderViewDelegate {

   //////

   func sleepingTimerDidFinish(controller: MainHeaderView) {
        // 処理
    }

   /////
   
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※ ソースは拙作のohayoからコピペ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UIButttonをSwiftで書く</title>
      <link>http://goozenlab.com/blog/2015/03/uibutton-swift/</link>
      <pubDate>Tue, 17 Mar 2015 08:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/uibutton-swift/</guid>
      <description>&lt;p&gt;UIButttonをSwiftでプログラム的に書くと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buttonMoodExecelent = UIButton.buttonWithType(UIButtonType.Custom) as UIButton
buttonMoodExecelent.frame = CGRect(x: 0, y: 0, width: 30, height: 30)
buttonMoodExecelent.tag = TagButtonMood.Execelent
buttonMoodExecelent.addTarget(self, action: &amp;quot;selectedMood:&amp;quot;, forControlEvents: .TouchUpInside)
buttonMoodExecelent.setBackgroundImage(UIImage(named: &amp;quot;MoodExecelent&amp;quot;), forState: UIControlState.Normal)

self.vew.addSubview(buttonMoodExecelent)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テキストタイトルの時には&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buttonCancel.setTitle(&amp;quot;cancel&amp;quot;, forState: UIControlState.Normal)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テキストの色を変えるには、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buttonCancel.setTitleColor(UIColor.redColor(), forState: .Normal)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もっと細かく、フォント等も弄りたい時には、&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setAttributedTitle:forState&lt;/code&gt;を使うとさ。&lt;/p&gt;

&lt;p&gt;※ ソースは拙作のohayoからコピペ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>StatusBarをSwiftで隠す</title>
      <link>http://goozenlab.com/blog/2015/03/statusbar-swift/</link>
      <pubDate>Sun, 15 Mar 2015 08:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/statusbar-swift/</guid>
      <description>&lt;p&gt;iOSやXCodeのバーションが上がったりすると必ず分からなくなる。statusbarの扱い。&lt;/p&gt;

&lt;p&gt;iOS8とswiftでは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;override func prefersStatusBarHidden() -&amp;gt; Bool {
    return true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加するだけで良い。んっ、こんだけ？だったけ？？問題無く動いているようなので、不問。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SwiftでConstantを扱う</title>
      <link>http://goozenlab.com/blog/2015/03/constants-swift/</link>
      <pubDate>Sat, 14 Mar 2015 09:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/constants-swift/</guid>
      <description>&lt;p&gt;Swiftへの移行はスタンフォードの講義を聞きつつ進めたいところなのですが、ここネパールだとちょっと無理。
ネットでの情報も増えつつはあるように思えるが、まだまだな感じ。。&lt;/p&gt;

&lt;p&gt;分からないことが多々あるが、進めていかないと、、&lt;/p&gt;

&lt;p&gt;さて、これが正しい方法なのかは分からないけれども（一抹の不安があるが。。）、コンスタンツの扱いをSwiftにて行うには以下のようにしてます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//
//  LocalConstants.swift
//

import Foundation
import UIKit

    let ONE_DAY = 86400

struct UDKey {
    static let DisplayColorMode = &amp;quot;color_mode&amp;quot;
}

struct Default {
    static let ColorMode = &amp;quot;kawaii&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、他からのアクセスは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defaults.setValue(Default.ColorMode, forKey: UDKey.DisplayColorMode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにしています。&lt;/p&gt;

&lt;p&gt;※ Swiftでのenumが掴めない。意味が分からない。&lt;/p&gt;

&lt;p&gt;追記 (&lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;22&lt;/sub&gt;)：&lt;code&gt;import UIKit&lt;/code&gt;を追加する。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>クラスが読み込めず</title>
      <link>http://goozenlab.com/blog/2015/03/unable-to-load-class/</link>
      <pubDate>Thu, 12 Mar 2015 16:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/unable-to-load-class/</guid>
      <description>&lt;p&gt;TapasをSwiftに移行中です。一番癖の無いアプリという事で白羽の矢があたりましたが、、、ブログに引っかかったところ等アップしていきたいと思ってます。&lt;/p&gt;

&lt;p&gt;さて、さて、まずは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-03-11 16:23:14.627 tapas[9910:539155] CoreData: warning: 
Unable to load class named &#39;Item&#39; for entity &#39;Item&#39;.  
Class not found, using default NSManagedObject instead.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というエラーがでる。ファイルはあるのだが、、&lt;/p&gt;

&lt;p&gt;これは、動く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func configureCell(cell: UITableViewCell, atIndexPath indexPath: NSIndexPath) {
    let item = self.fetchedResultsController.objectAtIndexPath(indexPath) as NSManagedObject
    var cell = cell as ListViewCell
    cell.textLabel?.text = item.valueForKey(&amp;quot;name&amp;quot;)!.description
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、動かなーーーーい。。。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func configureCell(cell: UITableViewCell, atIndexPath indexPath: NSIndexPath) {
    let item = self.fetchedResultsController.objectAtIndexPath(indexPath) as Item
    var cell = cell as ListViewCell
    cell.textLabel?.text = item.name
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ネットで調べるにも、、、停電かつ、ネットが途切れ途切れ。。。二進も三進もいかん。。
解決したら加筆します。とりあえず保留。（素直にストーリーボードを使うかな。）&lt;/p&gt;

&lt;p&gt;追記 @ 3/20：解決しました。詳細は&lt;a href=&#34;http://goozenlab.com/blog/2015/03/load-managedobject/&#34;&gt;こちら&lt;/a&gt;より。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-12-pockhara.jpg&#34; alt=&#34;Pokhara street&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UserDefaultの初期値設定</title>
      <link>http://goozenlab.com/blog/2015/03/userdefault-register-defaults/</link>
      <pubDate>Sun, 08 Mar 2015 08:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/userdefault-register-defaults/</guid>
      <description>&lt;p&gt;AppDelegateで行なう処理の一つのUserDefaultの初期値設定をSwiftにて。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; // UserDefault Initial values
 var userDefaultsDefaults = NSMutableDictionary()
 userDefaultsDefaults.setValue(&amp;quot;String&amp;quot;, forKey: KEY_SETTING)
 userDefaultsDefaults.setValue(50, forKey: KEY_SETTING2)
 NSUserDefaults.standardUserDefaults().registerDefaults(userDefaultsDefaults)
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数値も文字も気にせず書き込んでよいようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-08-pokhara-damside.jpg&#34; alt=&#34;Pokhara&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;ポカラの水汲み場&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ニブレスプロジェクト</title>
      <link>http://goozenlab.com/blog/2015/02/xibless-project/</link>
      <pubDate>Thu, 26 Feb 2015 07:25:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/02/xibless-project/</guid>
      <description>&lt;p&gt;swiftに移行中です。折角なのでなるべく奇麗にやり直したい、ずる無しでシンプルに仕上げたい。&lt;/p&gt;

&lt;p&gt;ストーリーボードにはどうも馴染めず、結局中途半端にViewのコンポーネントをコードで書き込んだりする事になりそうなので、最初から何もなし状態から始めた方が良いと、、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;まずは storyboard/xib 無しテーブルビューベースのプロジェクト、MasterViewController (UITableViewController) がMainViewController です。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool {
   // Override point for customization after application launch.

   self.window = UIWindow(frame: UIScreen.mainScreen().bounds)
   let masterViewController: MasterViewController = MasterViewController()
   masterViewController.managedObjectContext = self.managedObjectContext
   let navigationController = UINavigationController(rootViewController: masterViewController)
   self.window!.rootViewController = navigationController
   self.window!.makeKeyAndVisible()
   return true
}

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;お次ぎは、storyboard/xib 無しビューコントローラーベースのプロジェクト、MainViewController (UIViewController) が文字通り MainViewController です。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;、、が、、、、色々コンポーネントを追加していけば行くほど、アラートが上がってくる。。。（試行錯誤中）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool {
    // Override point for customization after application launch.
    
    self.window = UIWindow(frame: UIScreen.mainScreen().bounds)

    let mainViewController = MainViewController()
    mainViewController.managedObjectContext = self.managedObjectContext

    self.window!.rootViewController = mainViewController
    self.window!.makeKeyAndVisible()
    
    return true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;割と簡単に行きましたが、こんなものまで、調べつつやってます。。。let なのか var なのか、！なのか？なのか。。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>