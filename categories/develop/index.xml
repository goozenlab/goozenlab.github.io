<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Develop on goozenlab</title>
    <link>http://goozenlab.com/categories/develop/</link>
    <description>Recent content in Develop on goozenlab</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>goozenlab@gmail.com (jin)</managingEditor>
    <webMaster>goozenlab@gmail.com (jin)</webMaster>
    <lastBuildDate>Wed, 21 Sep 2016 09:30:00 +0900</lastBuildDate>
    <atom:link href="http://goozenlab.com/categories/develop/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>iPhone 5S始めました</title>
      <link>http://goozenlab.com/blog/2016/09/iphone5s/</link>
      <pubDate>Wed, 21 Sep 2016 09:30:00 +0900</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/09/iphone5s/</guid>
      <description>&lt;p&gt;母からのお下がり、iphone5Sを頂きました！。&lt;/p&gt;

&lt;p&gt;全然ヘビーユーザーで無い母ですから状態もすごく良いです。指紋認証すごいですね。これでAppleIDのパスワードに長くて安全なものにできる。でも、ちとでかいな。。母は今SEを使っているので、ちょっとSimLockを解除させてそちらを頂こうかとと、悪魔のささやきが、、。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-21-iphone5s.jpg&#34; alt=&#34; iphone5s&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ともかくありがたいことに、これでiOS10での実機検証が可能になりました。ありがたや。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>XCode8</title>
      <link>http://goozenlab.com/blog/2016/09/xcode8/</link>
      <pubDate>Mon, 19 Sep 2016 14:30:00 +0900</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/09/xcode8/</guid>
      <description>&lt;p&gt;日本に一時帰国する。iOS10での動作チェックをしようと思いXCode８をインストールしました。&lt;/p&gt;

&lt;p&gt;当分XCode7と共存させて使っていくつもりなので、今まで使っていたXCodeを別の場所にコピーして名前を変更。インストール終了後、移動したXCodeをアプリケーションに戻します。&lt;br /&gt;
（アプリケーションに入っている今まで使っているXCodeは名前を変更しても、アップデート時に新しいXCodeに書き換えられてしまいますので、要注意。）&lt;/p&gt;

&lt;p&gt;XCode８でプロジェクトを開けると、プロジェクトをSwift3かSwift2.3への書き換えを求められます。書き換えないとビルドができない。これは、今までのバイナリーだと動かないということなのか？？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-19-xcode8-convert.png&#34; alt=&#34;xcode8-convert&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-19-xcode-convert-swift3.png&#34; alt=&#34;xcode-convert-swift3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;しかも、書き換えないとビルドでエラー。同様にXCode8にて書き換えを行なったプロジェクトはXCode7ではビルドができなくなる。。XCode8に強制移行が求められるのは気分がよく無い。。。。（ぼやき：オメェ～ヨォ～、その前に新しいMBPを出せよ！）台風接近中だし、蒸し暑いし、気分がよく無い。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-19-xcode-error.png&#34; alt=&#34;xcode-error&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NSRegularExpression</title>
      <link>http://goozenlab.com/blog/2016/09/nsregularexpression/</link>
      <pubDate>Thu, 15 Sep 2016 08:30:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/09/nsregularexpression/</guid>
      <description>&lt;p&gt;NSRegularExpressionでのパターンマッチングでドツボ。（NSStringが出てきたりしてちょっと厄介な感じがあります。）&lt;/p&gt;

&lt;p&gt;(a)でのmdファイルのパースでちょっとはまりました。強調部分の抜き出しのとこで、nilが戻ってくる。小一時間ぐらいネットをふらつくも手がかりなし。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let pattern = &amp;quot;^(\\*\\*|__)(.*)(\\*\\*|__)$&amp;quot;

let regex = try? NSRegularExpression(pattern: pattern,
                                     options: NSRegularExpressionOptions.CaseInsensitive)
let matches = regex!.firstMatchInString(text,
                                        options: [],
                                        range: NSMakeRange(0, patternStr.utf16.count))
if let match = matches {
            title = (text as NSString).substringWithRange(match.rangeAtIndex(2))
		...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、しらみ潰しで削ったり変更したりして、どうにか、たどり着いたのが、&amp;rdquo;^&amp;ldquo;（行頭）を削除。で、動くようになりました。&amp;rdquo;^&amp;ldquo;の必要は無いのだけれども、動かなかった理由はわからず。。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let pattern = &amp;quot;(\\*\\*|__)(.*)(\\*\\*|__)$&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ブロック表記</title>
      <link>http://goozenlab.com/blog/2016/09/block-3ways/</link>
      <pubDate>Mon, 12 Sep 2016 09:00:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/09/block-3ways/</guid>
      <description>

&lt;p&gt;３つの記述方法があるようです、毎回ブロックにぶち当たると作業が止まるのでメモとして残す。&lt;/p&gt;

&lt;p&gt;ブロックでっせ！と、こんな感じで出てきます、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-11-block-enumerateLines.png&#34; alt=&#34; block-enumerateLines &#34; /&gt;&lt;/p&gt;

&lt;p&gt;ダブルクリックで、意味がわからなくなる。この前置詞 &lt;code&gt;in&lt;/code&gt; ちゅーのが曲者、どこの中じゃ？。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-11-block-enumerateLines-click.png&#34; alt=&#34; block-enumerateLines-click&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;その一&#34;&gt;その一&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;addressString.enumerateLines ({
    (line: String, inout stop: Bool) -&amp;gt; () in
    
    print(line)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;trailing-closure-syntax-を抜いてます&#34;&gt;Trailing closure syntax：（）を抜いてます。&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;addressString.enumerateLines {
    (line: String, inout stop: Bool) in
    
    print(line)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;xcodeの簡易バージョン&#34;&gt;XCodeの簡易バージョン&lt;/h2&gt;

&lt;p&gt;これが一番意味がつかめないのですが、最初に出てきたときによく見ろということですな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;addressString.enumerateLines {
    (line, stop) in
    
    println(line)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>unWind segway</title>
      <link>http://goozenlab.com/blog/2016/09/segway-unwind/</link>
      <pubDate>Fri, 09 Sep 2016 08:30:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/09/segway-unwind/</guid>
      <description>&lt;p&gt;今までは、移行先のデレゲートで処理を行っていた事を、便利そうなSegueのunWindでやってみようと思いました。しかしながら、XCodeのストーリーボードでいろいろ探しても、どこにもそれらしくものが見つかりません。使うのやめようかとも思いましたが、調べました。簡単にどこかでコントロールクリックすればできると思ってましたが、違いました。&lt;/p&gt;

&lt;p&gt;使いたい例は、ListVC（リストViewController)からセグウェイでDetailVCに行き、DetailVCにて編集終了後、unWindするという流れ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ListVCからDetailVCにセグウェイを設定（コントロールドラッグ）&lt;/li&gt;
&lt;li&gt;ListVCに下記のコードを追加&lt;/li&gt;
&lt;li&gt;DetailVCのexitをクリック、コネクションインスペクターにコードで追加したファンクションが&lt;strong&gt;表示&lt;/strong&gt;される&lt;/li&gt;
&lt;li&gt;リンクをボタンなりに繋ぐ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-08-segway-unwind.png&#34; alt=&#34; segway-unwind&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ListVCに追加したコードは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@IBAction func unwind___XXX___(unwindSegue: UIStoryboardSegue, towardsViewController subsequentVC: UIViewController) または (unwindSegue: UIStoryboardSegue)
 {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いろいろ試したところ、&lt;code&gt;@IBAction func unwind___XXX___&lt;/code&gt; が入っていれば認識されるよう&lt;code&gt;___XXX___&lt;/code&gt;の部分は必要なものに置き換えてください。引数も&lt;code&gt;(unwindSegue: UIStoryboardSegue)&lt;/code&gt;が入っていれば問題は無いようですが、こちらも追加・変更可能のようです。&lt;/p&gt;

&lt;p&gt;あとListVCでデーターを処理して、以前からのデレゲートでの処理と同じになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@IBAction func unwindFromDetailView(unwindSegue: UIStoryboardSegue) {

	// 処理
	let title = unwindSegue.sourceViewController.title
	
	.........
	
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;XCode7では、unwind&amp;hellip;をタイプすると下記のコードを書き出してくれますが動きません。中途半端だ、、ちょっと数時間、嫌〜〜な気分になりました。。。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;override func unwindForSegue(unwindSegue: UIStoryboardSegue, towardsViewController subsequentVC: UIViewController) {
        &amp;lt;#code#&amp;gt;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やっぱり、ストーリーボードは好きになれません。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>アイコンとネーミング</title>
      <link>http://goozenlab.com/blog/2016/09/app-icon-naming/</link>
      <pubDate>Wed, 07 Sep 2016 12:00:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/09/app-icon-naming/</guid>
      <description>

&lt;p&gt;アプリを作る最初の一歩。XCodeでプロジェクを新規、で・・・・。アプリを作ろうと思って最初につまずくところ、アプリの名前。&lt;/p&gt;

&lt;p&gt;個人的にアイコン作りと、アプリのネーミングを考えたりするのは好きですが、頭を悩ますところでもあります。
別に新しいことはないと思いますが、自分がどのようにしたのか、ちょっと書いてみたいと思います。（あとで変更は可能なのですが、私は名前が決まらないと、なんか居心地が悪いというか、、）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-06-app-icon-naming.png&#34; alt=&#34; app icon naming&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;naming&#34;&gt;Naming&lt;/h2&gt;

&lt;p&gt;理想的に、パッと目に入るような名前だと最高なのですが、、、。&lt;/p&gt;

&lt;p&gt;私のアプリの名前のつけ方は簡単に書くと、「作るソフトの機能に関連する言葉を広げていって、いじってみたり、語呂を何かと合わせてみたりして、いくつかに絞り、最終的に響きの良いものを選ぶ」かな、後々パッと浮かんだことは残念ながら無いです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;liitlist：”little + list” もしくはminimalistてきな ”little + ist” から&lt;/li&gt;
&lt;li&gt;doop：duplicationを捻って、向かいから見てもdoop、１回転してもdoop。リサイクル管理系のアプリ（エネループも頭にあったかな。）&lt;/li&gt;
&lt;li&gt;ohaYo：睡眠ログアプリ。Yが大文字なのがこだわり&lt;/li&gt;
&lt;li&gt;ippuku：「俺働きすぎ？一体いつ一服できんだ？」とアプリを作る時にあった想いから&lt;/li&gt;
&lt;li&gt;コスパ：シンプルにコストパフォーマンスより&lt;/li&gt;
&lt;li&gt;tapas：マルチキッチンタイマー、ご存知スペイン料理のおつまみの総称（次点は、タンドリーチキンを変化させて「ダンドリーキッチン」だったかな。）&lt;/li&gt;
&lt;li&gt;sati：瞑想アプリなので、パーリー語（仏教用語：念、気づき）より&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;外国語を使うとなんとなくオシャレになる。今度は漢字を使った漢なソフトでも作るかな。&lt;/p&gt;

&lt;p&gt;自分でいいなと思ったアプリ名とか商品名をリストしてみて、その共通項や特徴を見つけてみることも良い助けになると思います。&lt;/p&gt;

&lt;p&gt;拙作のなかでの傑作ネーミングは、doop littlist と (a) だと、他のソフトは割とありきたりのネーミング、平均点。&lt;/p&gt;

&lt;p&gt;※ (a) はアイディアの元になっているファイルの表記方法からとっていて、結局そのプランはダメになってしまったんですが、
日本語にすると、かっこえー（格好えー）になる。&lt;/p&gt;

&lt;h2 id=&#34;icon&#34;&gt;Icon&lt;/h2&gt;

&lt;p&gt;アプリの顔です。個人製作のアプリということを考慮すると割に出来の良い方だと思います。センスも大事だとは思いますが、ちょっとしたルールでそれなりに仕上がると思います。無理しすぎないことが割と重要でないかと、、&lt;/p&gt;

&lt;p&gt;個人的に注意していること&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;なるべく、アプリで使っているコンポーネントから、親和性&lt;/li&gt;
&lt;li&gt;アプリで使っている色、白バックでも黒バックでも問題ないように、&lt;/li&gt;
&lt;li&gt;フォントは雰囲気に合ったもの&lt;/li&gt;
&lt;li&gt;グリッドに合わせる（人間の目って割と精巧で、ずれていると違和感を感じます。）&lt;/li&gt;
&lt;li&gt;シンプルかつシンプル&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;色は自分で使う色を絞り込んでまとめています。全部で20色ぐらいのパレットになっています。&lt;/p&gt;

&lt;p&gt;数年前の、iOS8よりフラットデザインになってアイコンデザインを結構変えました。それまで、使っていたグラデーションもすごく微妙な感じにして、全体的にシンプルにしました。良い変更例は下記のオハヨのケース。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-06-app-icon-ohayo.png&#34; alt=&#34; app-icon-ohayo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;私のお気に入りは、littlist、doopかな。（littlistは最初からずっと同じデザイン、自画自賛アイコン。）&lt;/p&gt;

&lt;p&gt;ちなみに、リスタリアというソフトでは、数字のところにバージョンナンバーが、そして、買い物リストのアプリなので、果物の名前をバージョンごと違うものを入れています。バーコードも適当ではありません。スキャナーで読み取ることもできます。ちょっとしたお遊び。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-06-app-icon-listaria.png&#34; alt=&#34; app-icon-listaria &#34; /&gt;&lt;/p&gt;

&lt;p&gt;ちなみにアイコン制作に使っているアプリは、以前はアドビのFireworksで、今はAffinity Designerを使ってます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ギットハブ公開</title>
      <link>http://goozenlab.com/blog/2016/09/github-open-sati/</link>
      <pubDate>Tue, 06 Sep 2016 07:00:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/09/github-open-sati/</guid>
      <description>

&lt;p&gt;ギットハブ公開に向けて行ったこと。XCodeでのプロジェクト設定とこれからの管理について。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;問題点&lt;/strong&gt;：ギットハブに公開するプロジェクトには、バンドルアイデンティファイヤ、AppleIDを入れたくない。そして、アプストアーに公開するにはコードサインをしなくてはいけない。（アイデンティファイヤ、AppleIDが必要）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解決案&lt;/strong&gt;：二つのプロジェクトと共有コードの形での運用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一つ目のプロジェクトは、作業用。ギットハブと連動して作業をします。個人情報入れないでも、シミュレーターでアプリを動かすことができます。&lt;/p&gt;

&lt;p&gt;もう一つは、アプストアービルド、デプロイ用。プロジェクトファイル以外は、上のプロジェクトからファイルをリンクします。（コピーではなく、シンボリックリンクにみたいなもの？）このプロジェクトには、アプストアーに登録するための情報を入れておきます。ギットは使いません。&lt;/p&gt;

&lt;h2 id=&#34;作業&#34;&gt;作業&lt;/h2&gt;

&lt;p&gt;サティを公開するための行った作業をちょっと詳しく。まずは今まで作業していたフォルダーを一気にコピー。&lt;/p&gt;

&lt;p&gt;一つを、open.sati (公開用） もう一つを sati (デプロイ用）にします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-05-open.sati-folder.png&#34; alt=&#34; open.sati folders &#34; /&gt;&lt;/p&gt;

&lt;p&gt;ともにフレッシュスタートということで、ディレクトリー内にある .git　ディレクトリーを削除します。隠れファイルなので、ターミナルから &lt;code&gt;rm -rf .git/&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-05-open.sati-remove-git.png&#34; alt=&#34; remove git &#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;sati-アプストアー-実機検証用&#34;&gt;sati：アプストアー、実機検証用&lt;/h3&gt;

&lt;p&gt;satiの中のファイルはフロジェクトファイル、info.plist以外、全て捨ててしまいます。&lt;/p&gt;

&lt;p&gt;プロジェクト内は真っ赤になります。一気に消してしまいます。&lt;/p&gt;

&lt;p&gt;そして、open.sati のフォルダーからファイルをまとめてドラッグ＆ドロップ。ダイアリグが出ます。コピーのチェックは外します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-05-open.sati-import-files.png&#34; alt=&#34; open.sati  import-files&#34; /&gt;&lt;/p&gt;

&lt;p&gt;残念ながら、&lt;code&gt;Localizable.strings&lt;/code&gt; がうまく引き継がれません。（多分ローカライズされたnibファイルなども引き継がれないと思います。）コマンドオプション＋ドラッグのエイリアスでファイルを持ってくるもNG。しかし、XCode上でファイルを一旦 open.sati よりコピーして消し、ターミナルで リンクを &lt;code&gt;ln -s&lt;/code&gt; でリンクしてあげれば読み込みます。なんか中途半端ですが動きます。ディレクトリーはこんな感じになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-05-open.sati-folder-list.png&#34; alt=&#34; folder listing &#34; /&gt;&lt;/p&gt;

&lt;p&gt;そして、README や LICENCE 等、ターゲットに入れないファイルをメンバーから外します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-05-open.sati-target-check.png&#34; alt=&#34; target-check &#34; /&gt;&lt;/p&gt;

&lt;p&gt;で、ビルドの設定などは引き継がれたままなので実機でもアプストア用のビルドなども今まで通り動きました。（アップロードはしていませんが、多分大丈夫だと思います。）&lt;/p&gt;

&lt;p&gt;こちらのプロジェクトでは、ファイルをいじらないようにします。あくまでも、ビルドと実機テストようにします。&lt;/p&gt;

&lt;h3 id=&#34;open-sati-ギットハブ-作業用&#34;&gt;open.sati：ギットハブ、作業用&lt;/h3&gt;

&lt;p&gt;まずプロジェクトファイルを開けて、公開したくないものを抜きます。そして、リンクしているファイルがないかチェック。（私は、ビルド時にローカルからのファイルを参照しているところがあるので、その設定も抜きます。デプロイ用についていれば問題はない。）
幾つかのファイルは他のアプリと共有しているので、こっちのプロジェクトにコピーをします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-05-open.sati-identity.png&#34; alt=&#34; open.sati-identity&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一通りチェックを終えたら、シミュレーターで動くかチェックします。&lt;/p&gt;

&lt;p&gt;これで、作業はギットハブのプロジェクトで行う。ギットハブと共有しているプロジェクトでもシミュレーターで動かせることができ、検証機で動かしたい時とアプストアーにアップする時は別のプロジェクトですれば良い。デプロイ用はほとんど手を入れる必要はない、はず。&lt;/p&gt;

&lt;p&gt;そして、公開します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;：
READMEとライセンスはプロジェクトと同じ階層に置いておきましょう。ギットハブではそのREADが読み込まれ表示されます。&lt;/p&gt;

&lt;h2 id=&#34;ギットハブに公開&#34;&gt;ギットハブに公開&lt;/h2&gt;

&lt;p&gt;公開をするには、ギットハブに載っている方法で行います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-05-open.sati-git-add.png&#34; alt=&#34; open.sati git add&#34; /&gt;&lt;/p&gt;

&lt;p&gt;まずはギットの初期化、その後、ファイルを追加して、コミットします。（ちょっとREADMEに何を書けばいいか悩みましたが、）９月６日のくろ～の日に公開。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-05-open.sati-initial-setup.png&#34; alt=&#34; open.sati-initial-setup &#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;duvel:open.sati jin$ git init
duvel:open.sati jin$ git add .
duvel:open.sati jin$ git commit -m &amp;quot;Initial Commit&amp;quot;
duvel:open.sati jin$ git remote add origin git@github.com:goozenlab/sati.git
duvel:open.sati jin$ git push -u origin master
Warning: Permanently added the RSA host key for IP address &#39;[192.30.253.122]:443&#39; to the list of known hosts.
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;鍵の設定でエラーが出ますが、作ってある公開鍵をコピーしギットハブの設定より新しい鍵の追加設定をします。&lt;a href=&#34;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&#34;&gt;参照&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-06-open.sati.ssh-key.png&#34; alt=&#34; /open.sati.ssh-key&#34; /&gt;&lt;/p&gt;

&lt;p&gt;で再度挑戦、こんどはうまくいきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;duvel:open.sati jin$ git push -u origin master
Warning: Permanently added the RSA host key for IP address &#39;[192.30.253.123]:443&#39; to the list of known hosts.
Counting objects: 155, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (149/149), done.
Writing objects: 100% (155/155), 10.10 MiB | 39.00 KiB/s, done.
Total 155 (delta 37), reused 0 (delta 0)
remote: Resolving deltas: 100% (37/37), done.
To git@github.com:goozenlab/sati.git
 * [new branch]      master -&amp;gt; master
Branch master set up to track remote branch master from origin.
duvel:open.sati jin$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;伴う追加作業&#34;&gt;伴う追加作業&lt;/h2&gt;

&lt;p&gt;sati.xcodeprojで引き継げないところは、個別に変更する必要があります。（ビルド番号など）
このプロジェクトの場合、ビルド終了時走らせているスクリプトも少し変更します。
少しだけ、リリース時に手を入れないといけないことがあります。&lt;/p&gt;

&lt;h2 id=&#34;これから&#34;&gt;これから、&lt;/h2&gt;

&lt;p&gt;これで終了です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-06-open.sati-github-initital.png&#34; alt=&#34; /open.sati-github-initital&#34; /&gt;&lt;/p&gt;

&lt;p&gt;で、、、READMEを入れる場所を間違えた。。がまあいいでしょう。次回コミット時に変更します。&lt;/p&gt;

&lt;p&gt;ただし、作業用のプロジェクトで新しいファイルが追加された時は別途そのファイルをデプロイ用でも追加する作業が必要になります。まぁ、ビルドが通らなくなるのでわかると思いますが、、、&lt;/p&gt;

&lt;p&gt;とりあえず。こんな感じで当分は行ってみます。&lt;/p&gt;

&lt;p&gt;もし他に良い方法があったら、教えてください。（なーーんかありそうな感じ。）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Podsを使う</title>
      <link>http://goozenlab.com/blog/2016/09/use-pods/</link>
      <pubDate>Sat, 03 Sep 2016 07:00:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/09/use-pods/</guid>
      <description>&lt;p&gt;XCode7.3.1にて先日インストール&lt;a href=&#34;http://goozenlab.com/blog/2016/09/install-pods/&#34;&gt;（記事）&lt;/a&gt;したポッドを使います。これがびっくり簡単で驚きました。&lt;/p&gt;

&lt;p&gt;ただ、ヘッダーをインポートするだけ！です。ブリッジがどうだこうだみたいのを作らないといけないと思っていたので拍子抜け。素晴らしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import UIKit
import CoreData

import ReachabilitySwift
import MBProgressHUD
import SwiftyDropbox

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でも、なんか、XCodeが半落ち状態になることが頻発するようになった。。&lt;/p&gt;

&lt;p&gt;ちなみに、Podfileはこんな感じです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;project &#39;(a).xcodeproj&#39;
platform :ios, &#39;8.0&#39;

target &#39;(a)&#39; do
  use_frameworks!

  # Pods for (a)
  pod &#39;ReachabilitySwift&#39;
  pod &#39;MBProgressHUD&#39;
  pod &#39;SwiftyDropbox&#39;
  
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>XCodeにてアプリデーターの管理</title>
      <link>http://goozenlab.com/blog/2016/09/device-container/</link>
      <pubDate>Fri, 02 Sep 2016 08:30:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/09/device-container/</guid>
      <description>

&lt;p&gt;端末のアプリデータをバックアップ、復元。&lt;/p&gt;

&lt;p&gt;クリーンインストールでのミス、弊害のひとつ。XCodeにてコードサインの変更またはRevokeによる実機へのインストールがきなくなる不具合。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-02-appinstall-fail.png&#34; alt=&#34;appinstall-fail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この不具合は、実機に入っているアプリを消去して再インストールすることで解決はするのですが、中に入っているデーターが消えてしまします。そこで、以前は iExplore というソフトを行って実機からバックアップを取っていたのを、いつからか、XCodeでもできるようになっていたのでメモ。（開発環境がXCode5から一気にXCode7になったので、、まぁ改悪は今の所無いのだけど、、分からんことが一杯だな。。）&lt;/p&gt;

&lt;h2 id=&#34;データーのバックアップ-復元&#34;&gt;データーのバックアップ・復元&lt;/h2&gt;

&lt;p&gt;まずは、XCodeにて、メニューの Window - Device にて端末を選択します。インストールされたソフトがリストされます。データーをバックアップ・復元したいアプリを選択します。下の＋・ー・歯車の歯車を選択するとコンテナに対するメニューが表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-02-container-download.png&#34; alt=&#34;Container download&#34; /&gt;&lt;/p&gt;

&lt;p&gt;実機にインストール前に、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;コンテナをダウンロード&lt;/li&gt;
&lt;li&gt;エラーの出るアプリを消去&lt;/li&gt;
&lt;li&gt;アプリを再インストール&lt;/li&gt;
&lt;li&gt;コンテナのリプレース&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-02-container-replace.png&#34; alt=&#34;Container replace&#34; /&gt;&lt;/p&gt;

&lt;p&gt;にて作業を終えます。&lt;/p&gt;

&lt;h2 id=&#34;コンテナファイル&#34;&gt;コンテナファイル&lt;/h2&gt;

&lt;p&gt;そこで、コンテナファイルの中身を見てみます。ダウンロードすると以下のような &lt;code&gt;****.xcappdata&lt;/code&gt; が保存されます。Ctr+Clickで中身を見てみると以下のようになってます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-02-appdata.png&#34; alt=&#34;Appdata&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Documentフォルダー内にある &lt;code&gt;*.sql&lt;/code&gt; の三つのファイルがアプリのデーターになります。Libraryのなかには設定用のplistファイルがあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-02-appdata-detail.png&#34; alt=&#34;Appdata detail&#34; /&gt;&lt;/p&gt;

&lt;p&gt;※そしてこのファイルをシミュレーターに入れることでデーターを更新することもできます。スクリーンショットを撮るためにアプリのデーターが必要だったりする時などに役に立ちます。&lt;/p&gt;

&lt;h2 id=&#34;シミュレータヘのデーター移行&#34;&gt;シミュレータヘのデーター移行&lt;/h2&gt;

&lt;p&gt;シミュレータのデーターはちょと厄介なとこにあり、探すのに一苦労します。たくさんインストールする前に、探してどこかにメモしておきましょう。&lt;/p&gt;

&lt;p&gt;まずは、Simulatorの識別番号を XCodeのDeviceより確認します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-02-simulator-identifier.png&#34; alt=&#34;simulator-identifier&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ファインダーに戻り、ライブラリーに入り。&lt;/p&gt;

&lt;p&gt;~/Library/Developer/CoreSimulator/Devices/&lt;strong&gt;IDENTIFIER for Simulator&lt;/strong&gt;/data/Containers/Data/Application/&lt;strong&gt;IDENTIFIER for Application&lt;/strong&gt;/Documents&lt;/p&gt;

&lt;p&gt;に移動して、上の&lt;code&gt;*.sql&lt;/code&gt; の三つのファイルを上書きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-02-simulator-app-directory.png&#34; alt=&#34;simulator-app-directory&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;シミュレータのデーターを実機で使う&#34;&gt;シミュレータのデーターを実機で使う&lt;/h2&gt;

&lt;p&gt;逆に、実機にシミュレーターのデーターを使いたいときは、ダウンロードした、&lt;code&gt;****.xcappdata&lt;/code&gt; ファイルのなかの&lt;code&gt;*.sql&lt;/code&gt; の三つのファイルをシミュレーターのもので上書きして、実機のコンテナをリプレースします。&lt;/p&gt;

&lt;p&gt;iExploreが使えなくなって難儀していたので、同じような問題を抱えた方にお役に立てば。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Podsをプロジェクトに</title>
      <link>http://goozenlab.com/blog/2016/09/install-pods/</link>
      <pubDate>Thu, 01 Sep 2016 07:00:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/09/install-pods/</guid>
      <description>&lt;p&gt;プロジェクトにポッド・ライブラリーを追加します。でこれまたエラーが出る。とりあえず手動でインストールすることにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pod install
Setting up CocoaPods master repo
[!] Unable to add a source with url `https://github.com/CocoaPods/Specs.git` named `master`.
You can try adding it manually in `~/.cocoapods/repos` or via `pod repo add`.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、回線状況悪く途中で回線が切断されエラー。（後もーちょいなのに、、）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd .cocoapods/repos/
$ git clone https://github.com/CocoaPods/Specs.git
Cloning into &#39;Specs&#39;...
remote: Counting objects: 801469, done.
remote: Compressing objects: 100% (30/30), done.
Receiving objects:  83% (671735/801475), 209.63 MiB | 10.00 KiB/s    
error: RPC failed; curl 56 SSLRead() return error -980600 KiB/s     
fatal: The remote end hung up unexpectedly
fatal: early EOF
fatal: index-pack failed
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;思ったよりファイルが大きいです（310 MiBくらい）。回線状況が悪い中でいるので終了まで結構時間がかかりました。朝の５時に起きて、早朝の誰も使っていないだろう時間帯でようやく完了。
（途中回線が切れること数回、、、）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-09-01-cocoapod-install.png&#34; alt=&#34;pods install&#34; /&gt;&lt;/p&gt;

&lt;p&gt;で改めて、プロジェクトディレクトリーの移動して、ポッドのインストール。今回は別件でエラーが出るが、まぁスムースに終了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pod install
Downloading dependencies
Installing Alamofire (3.3.1)
Installing Reachability (3.2)
Installing SwiftyDropbox (3.2.0)
Generating Pods project
Integrating client project

[!] Please close any current Xcode sessions and use `(a).xcworkspace` for this project from now on.
Pod installation complete! There are 2 dependencies from the Podfile and 3 total pods installed.
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ネット上では、&lt;code&gt;pod install --no-repo-update --verbose&lt;/code&gt; でインストールというのも見ました。もし引き続きエラーが出る方はお試しを。&lt;/p&gt;

&lt;p&gt;swiftのライブラリーに切り替えたり、ライブラリを追加インストールや削除するときは、Podfileにライブラリを追加・削除し、アップデートします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ $ pod update
Update all pods
Updating local specs repositories
Analyzing dependencies
Removing Reachability
Downloading dependencies
Using Alamofire (3.3.1)
Installing JGProgressHUD (1.4)
Using ReachabilitySwift (2.3.3)
Using SwiftyDropbox (3.2.0)
Generating Pods project
Integrating client project
Pod installation complete! There are 3 dependencies from the Podfile and 4 total pods installed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで終了。&lt;/p&gt;

&lt;p&gt;安堵。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sudo-less Gem &amp; Cocoapods</title>
      <link>http://goozenlab.com/blog/2016/08/install-cocoapods/</link>
      <pubDate>Wed, 31 Aug 2016 13:00:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/08/install-cocoapods/</guid>
      <description>&lt;p&gt;ちょっと問題を抱えていたcocoapodsをEl Capitanにインストールしました。&lt;/p&gt;

&lt;p&gt;以前インストールした時に、ちょっと須藤&amp;amp;ジェム地獄に陥ったので今回は、sudo-less で &lt;code&gt;~/.gem&lt;/code&gt; 内にインストール。&lt;/p&gt;

&lt;p&gt;まずは、bashの設定 &lt;code&gt;~/.bash_profile&lt;/code&gt; を弄ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# sudo-less Gem
export GEM_HOME=$HOME/.gem
export PATH=$GEM_HOME/ruby/2.0.0/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cocoapodsを普通にインストールをすると、activesupportのインストールの所でエラーになります。ルビーのバージョンが低いとのエラーで、色々と方法はあるのですが、ルビー自体を別にインストールするのも今はちょっと避けたかったので、引っかかりのあるパッケージを手動でインストールすることで問題の解決をはかります。（前のバージョンということか、、）&lt;/p&gt;

&lt;p&gt;ディレクトリーを作り、&lt;code&gt;--user-install&lt;/code&gt;のオプションをつけインストールをします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd
$ mkdir .gem
$ gem install activesupport -v 4.2.6 --user-install
$ gem install cocoapods --user-install
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ gem install activesupport -v 4.2.6 --user-install
Fetching: i18n-0.7.0.gem (100%)
Successfully installed i18n-0.7.0
Fetching: thread_safe-0.3.5.gem (100%)
Successfully installed thread_safe-0.3.5
Fetching: tzinfo-1.2.2.gem (100%)
Successfully installed tzinfo-1.2.2
Fetching: minitest-5.9.0.gem (100%)
Successfully installed minitest-5.9.0
Fetching: activesupport-4.2.6.gem (100%)
Successfully installed activesupport-4.2.6
Parsing documentation for i18n-0.7.0
Installing ri documentation for i18n-0.7.0
Parsing documentation for thread_safe-0.3.5
Installing ri documentation for thread_safe-0.3.5
Parsing documentation for tzinfo-1.2.2
Installing ri documentation for tzinfo-1.2.2
Parsing documentation for minitest-5.9.0
Installing ri documentation for minitest-5.9.0
Parsing documentation for activesupport-4.2.6
unable to convert &amp;quot;\x84&amp;quot; from ASCII-8BIT to UTF-8 for lib/active_support/values/unicode_tables.dat, skipping
Installing ri documentation for activesupport-4.2.6
5 gems installed
$ gem install cocoapods --user-install
Fetching: nap-1.1.0.gem (100%)
Successfully installed nap-1.1.0
Fetching: fuzzy_match-2.0.4.gem (100%)
Successfully installed fuzzy_match-2.0.4
Fetching: cocoapods-core-1.0.1.gem (100%)
Successfully installed cocoapods-core-1.0.1
Fetching: claide-1.0.0.gem (100%)
Successfully installed claide-1.0.0
Fetching: cocoapods-deintegrate-1.0.0.gem (100%)
Successfully installed cocoapods-deintegrate-1.0.0
Fetching: cocoapods-downloader-1.1.0.gem (100%)
Successfully installed cocoapods-downloader-1.1.0
Fetching: cocoapods-plugins-1.0.0.gem (100%)
Successfully installed cocoapods-plugins-1.0.0
Fetching: cocoapods-search-1.0.0.gem (100%)
Successfully installed cocoapods-search-1.0.0
Fetching: cocoapods-stats-1.0.0.gem (100%)
Successfully installed cocoapods-stats-1.0.0
Fetching: netrc-0.7.8.gem (100%)
Successfully installed netrc-0.7.8
Fetching: cocoapods-trunk-1.0.0.gem (100%)
Successfully installed cocoapods-trunk-1.0.0
Fetching: cocoapods-try-1.1.0.gem (100%)
Successfully installed cocoapods-try-1.1.0
Fetching: molinillo-0.4.5.gem (100%)
Successfully installed molinillo-0.4.5
Fetching: colored-1.2.gem (100%)
Successfully installed colored-1.2
Fetching: xcodeproj-1.2.0.gem (100%)
Successfully installed xcodeproj-1.2.0
Fetching: escape-0.0.4.gem (100%)
Successfully installed escape-0.0.4
Fetching: fourflusher-0.3.2.gem (100%)
Successfully installed fourflusher-0.3.2
Fetching: cocoapods-1.0.1.gem (100%)
Successfully installed cocoapods-1.0.1
Fetching: concurrent-ruby-1.0.2.gem (100%)
Successfully installed concurrent-ruby-1.0.2
Parsing documentation for nap-1.1.0
Installing ri documentation for nap-1.1.0
Parsing documentation for fuzzy_match-2.0.4
Installing ri documentation for fuzzy_match-2.0.4
Parsing documentation for cocoapods-core-1.0.1
Installing ri documentation for cocoapods-core-1.0.1
Parsing documentation for claide-1.0.0
Installing ri documentation for claide-1.0.0
Parsing documentation for cocoapods-deintegrate-1.0.0
Installing ri documentation for cocoapods-deintegrate-1.0.0
Parsing documentation for cocoapods-downloader-1.1.0
Installing ri documentation for cocoapods-downloader-1.1.0
Parsing documentation for cocoapods-plugins-1.0.0
Installing ri documentation for cocoapods-plugins-1.0.0
Parsing documentation for cocoapods-search-1.0.0
Installing ri documentation for cocoapods-search-1.0.0
Parsing documentation for cocoapods-stats-1.0.0
Installing ri documentation for cocoapods-stats-1.0.0
Parsing documentation for netrc-0.7.8
Installing ri documentation for netrc-0.7.8
Parsing documentation for cocoapods-trunk-1.0.0
Installing ri documentation for cocoapods-trunk-1.0.0
Parsing documentation for cocoapods-try-1.1.0
Installing ri documentation for cocoapods-try-1.1.0
Parsing documentation for molinillo-0.4.5
Installing ri documentation for molinillo-0.4.5
Parsing documentation for colored-1.2
Installing ri documentation for colored-1.2
Parsing documentation for xcodeproj-1.2.0
Installing ri documentation for xcodeproj-1.2.0
Parsing documentation for escape-0.0.4
Installing ri documentation for escape-0.0.4
Parsing documentation for fourflusher-0.3.2
Installing ri documentation for fourflusher-0.3.2
Parsing documentation for cocoapods-1.0.1
Installing ri documentation for cocoapods-1.0.1
Parsing documentation for concurrent-ruby-1.0.2
Installing ri documentation for concurrent-ruby-1.0.2
19 gems installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、無事終了、インストールできました。これで、(a)の移行ができる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>インストール: Homebrew</title>
      <link>http://goozenlab.com/blog/2016/08/install-homebrew/</link>
      <pubDate>Wed, 31 Aug 2016 13:00:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/08/install-homebrew/</guid>
      <description>

&lt;p&gt;Homebrew のインストール先は、デフォルトでは /usr/local になっています。インストール先をちょっと除いてみると、なーーんか荒らされている感じがある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/local/
total 24
drwxr-xr-x   14 jin  admin   476B Mar 29 10:51 .git/
drwxr-xr-x    5 jin  admin   170B Feb 20  2016 .github/
-rw-r--r--    1 jin  admin   823B Feb 20  2016 .gitignore
-rw-r--r--    1 jin  admin   1.3K Feb 20  2016 .travis.yml
-rw-r--r--    1 jin  admin   291B Oct 16  2015 .yardopts
-rw-r--r--    1 jin  admin   3.1K Jun  1  2015 CODEOFCONDUCT.md
drwxr-xr-x    9 jin  admin   306B Apr 18  2015 Cellar/
drwxr-xr-x    3 jin  admin   102B Nov 11  2015 Frameworks/
-rw-r--r--    1 jin  admin   1.2K Feb 20  2016 LICENSE.txt
drwxr-xr-x   11 jin  admin   374B Mar 29 10:51 Library/
-rw-r--r--    1 jin  admin   3.8K Feb 26  2016 README.md
drwxr-xr-x  135 jin  admin   4.5K Mar 31 21:02 bin/
drwxr-xr-x    4 jin  admin   136B Feb 20  2016 etc/
drwxr-xr-x    8 jin  admin   272B Apr 18  2015 include/
drwxr-xr-x   18 jin  admin   612B Apr 18  2015 lib/
drwxr-xr-x    9 jin  admin   306B Mar 29 10:53 opt/
drwxr-xr-x    4 jin  admin   136B Mar  5  2015 share/
drwxr-xr-x    3 jin  admin   102B Apr  1  2015 var/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という事で、再インストールは Homebrew のインストール先を変更する事に、スッキリとホームディレクトリー内の&lt;code&gt;~/.brew&lt;/code&gt; にする。（よくよく考えると、&lt;code&gt;~/Library/Homebrew&lt;/code&gt;でも良かったかなと思ったりする。）&lt;/p&gt;

&lt;h2 id=&#34;homebrew-のインストール&#34;&gt;Homebrew のインストール&lt;/h2&gt;

&lt;p&gt;コピーもしくはクローンでインストールできます。私はサイト上にあった方法のコピーでインストールを行いました。ちなみに、gitでは &lt;code&gt;$ git clone https://github.com/Homebrew/brew.git ~/.brew&lt;/code&gt; 。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd
$ mkdir .brew &amp;amp;&amp;amp; curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C .brew
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;実行パスの設定&#34;&gt;実行パスの設定&lt;/h2&gt;

&lt;p&gt;とりあえず、PREFIXなど状況をチェック。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ .brew/bin/brew config
HOMEBREW_VERSION: 0.9.9
ORIGIN: (none)
HEAD: (none)
Last commit: never
Core tap: N/A
HOMEBREW_PREFIX: /Users/jin/.brew
HOMEBREW_REPOSITORY: /Users/jin/.brew
HOMEBREW_CELLAR: /Users/jin/.brew/Cellar
HOMEBREW_BOTTLE_DOMAIN: https://homebrew.bintray.com
CPU: octa-core 64-bit sandybridge
Homebrew Ruby: 2.0.0-p648
Clang: 7.3 build 703
Git: 2.7.4 =&amp;gt; /Applications/Xcode.app/Contents/Developer/usr/bin/git
Perl: /usr/bin/perl
Python: /usr/bin/python
Ruby: /usr/bin/ruby =&amp;gt; /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby
Java: N/A
OS X: 10.11.6-x86_64
Xcode: 7.3.1
CLT: N/A
X11: N/A
$ .brew/bin/brew --cache
/Users/jin/Library/Caches/Homebrew
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;問題は無いようなので、実行パスを&lt;code&gt;.bash_profile&lt;/code&gt;に書き込みます。
そしてCacheの保存先は、&lt;code&gt;/Users/jin/Library/Caches/Homebrew&lt;/code&gt; になっているのでこれもついでに変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=$HOME/.brew/bin:$PATH
export HOMEBREW_CACHE=$HOME/.brew/cache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行をする前に、確認。警告が出るけど、まぁ大丈夫でしょう。。（必要無いような気もするけれど。）そして、hugoをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew doctor
Please note that these warnings are just used to help the Homebrew maintainers
with debugging if you file an issue. If everything you use Homebrew for is
working fine: please don&#39;t worry and just ignore them. Thanks!

Warning: Your Homebrew is not installed to /usr/local
You can install Homebrew anywhere you want but some bottles (binary
packages) can only be used in /usr/local and some formulae (packages)
may not build correctly unless you install in /usr/local. Sorry!

$ brew install hugo
Initialized empty Git repository in /Users/jin/.brew/.git/
remote: Counting objects: 1032, done.
remote: Compressing objects: 100% (924/924), done.
remote: Total 1032 (delta 91), reused 650 (delta 67), pack-reused 0
Receiving objects: 100% (1032/1032), 1.03 MiB | 93.00 KiB/s, done.
Resolving deltas: 100% (91/91), done.
From https://github.com/Homebrew/brew
 * [new branch]      master     -&amp;gt; origin/master
HEAD is now at 8e29cf1 Merge pull request #812 from DomT4/at
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/hugo-0.16.el_capitan.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring hugo-0.16.el_capitan.bottle.tar.gz
==&amp;gt; Caveats
Bash completion has been installed to:
  /Users/jin/.brew/etc/bash_completion.d
==&amp;gt; Summary
🍺  /Users/jin/.brew/Cellar/hugo/0.16: 29 files, 17.6M
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえず、hugoは動いてます。ちょっとアプリの移行が終わったら、pythonで機械学習の諸々を試してみようかな。。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> 半透明のモーダルビュー</title>
      <link>http://goozenlab.com/blog/2016/08/modalview-over/</link>
      <pubDate>Sun, 28 Aug 2016 09:30:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/08/modalview-over/</guid>
      <description>

&lt;p&gt;iOS6の頃はなんか面倒だったような気がした、下のViewが透けて見えるようなモーダルビューの設定。非常に簡単にできるようになってました。&lt;/p&gt;

&lt;h2 id=&#34;半透明のモーダルビュー設定&#34;&gt;半透明のモーダルビュー設定&lt;/h2&gt;

&lt;p&gt;まずはモーダルビュー自体を半透明化します。背景色を選び透明度を決めます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-28-modalview-overfull.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;それと、StoryboardにてのSegway設定だとなぜかうまく物と、行かないものがありました。あまり深くは掘り下げていませんが、とりあえず情報まで（解決：下記参照）。&lt;/p&gt;

&lt;p&gt;二通りあるようですが、厳密な違いはわからず、表示をテストで行うが全く同じに見えます。。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) { 
        if segue.identifier == &amp;quot;toSettingView&amp;quot; {
            if let destinationVC = segue.destinationViewController as? SettingViewController {
                destinationVC.modalPresentationStyle = 
                        UIModalPresentationStyle.OverCurrentContext
                        // UIModalPresentationStyle.OverFullScreen
                destinationVC.delegate = self
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、色々といじっていたら、インスペクターのPresentationの所でも変更ができます。コードでうまくいかなかった時にはこちらでいけます。知らなかったわ。。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-28-modalview-presentation.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;見た感じこんな風になります（使わないけど、悪い例）。まぁ想像通り、使うなら文字色とか背景の色とかを考慮する必要がありますわな。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-28-modalview-over_current_context.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;追記：すぐ上の白点ボタンの位置がずれてるな。。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>StatusBarメモ</title>
      <link>http://goozenlab.com/blog/2016/08/statusbar-memo/</link>
      <pubDate>Fri, 26 Aug 2016 09:30:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/08/statusbar-memo/</guid>
      <description>&lt;p&gt;アプリにて、StatusBarを隠す事が多いのだけれど、いつもやり方を忘れるのでメモしておく。&lt;/p&gt;

&lt;p&gt;まずは全体的な設定を、info.plistにて &lt;code&gt;View Controller-based status bar appearance&lt;/code&gt; を追加。(ここのところがいつも「どれだったっけ？」とわからなくなる。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-26-statusbar-info.png&#34; alt=&#34;StatusBar on Info.plist&#34; /&gt;&lt;/p&gt;

&lt;p&gt;info.plistに直接書き込むなら、以下を追加。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;UIViewControllerBasedStatusBarAppearance&amp;lt;/key&amp;gt;
	&amp;lt;false/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;そして、変更したいビューの適当なところ、&lt;code&gt;ViewDidLoad&lt;/code&gt; に追加コード。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UIApplication.sharedApplication().statusBarHidden = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もしくは、オーバーライドしても動くはず。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;override func prefersStatusBarHidden() -&amp;gt; Bool {
    return true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして、ステータスバーの文字色、黒文字を白文字に変えるには、statusBarStyleStyleを &lt;code&gt;.LightContent&lt;/code&gt; に変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UIApplication.sharedApplication().statusBarStyle = .LightContent
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lite VersionとAdmob</title>
      <link>http://goozenlab.com/blog/2016/08/lite-admob/</link>
      <pubDate>Thu, 25 Aug 2016 09:30:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/08/lite-admob/</guid>
      <description>

&lt;p&gt;Swiftへの移行がちょっと落ち着いてきたので、お次はライトバージョンの制作に移る。同じプロジェクト内でライト版のターゲットをもつ方法で行います。ライト版では広告を表示するため、コード内のマクロで作業の分離を行います。(XCode7.3.1にて)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ターゲットのコピーと調整&lt;/li&gt;
&lt;li&gt;スキームの変更&lt;/li&gt;
&lt;li&gt;新しいInfo.plistのリネーム、変更と移動&lt;/li&gt;
&lt;li&gt;コンパイル時のマクロ設定&lt;/li&gt;
&lt;li&gt;アイコンの追加&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;が主な作業の流れになります。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;まずはプロジェクトのメインターゲットを Duplicate します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-duplicate.png&#34; alt=&#34;Duplicate Target&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-duplicate-dailog.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-rename-target.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-manage-scheme.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;スキーム名の変更はできないようなので、Editボタンの上の＋より、新しいスキームを追加します。ここの、cosper copyのものは＋の横のーボタンで消去します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-add-scheme.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-delete-scheme.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Info.plistのコピーの &lt;code&gt;cosper copy-Info.plist&lt;/code&gt; はなぜか諸々のファイルのフォルダーの外に作られます。ちょっと面倒ですが、リネームしリファレンスから除き、プロジェクトにコピーして移動、そしていらなくなったファイルを削除をしましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-rename.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-taget-info-copy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そしてビルドセッティング内のInfo.plistパラメーターをディレクトリー名を含めたファイル名に変更します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-target-info-rename.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そして、ターゲットの設定をします。（バンドル名やその他必要なもの）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-target-general.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最後に、コンパイル時のマクロ設定をします。&lt;code&gt;#if LITE&lt;/code&gt; で処理を分岐できるようにします。LITE_VERSIONでもFREE_VERSIONでもご自分に適したものにしてください。&lt;/p&gt;

&lt;p&gt;マクロの設定は、ビルドセティングより、右のサーチボックスから検索していくと良いです。フル・ライト両方のターゲットで設定が必要です。ライトにて &lt;code&gt;LITE=1&lt;/code&gt; を、&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-macro-lite.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;フルバージョンの方には &lt;code&gt;LITE=0&lt;/code&gt; を書き込みます。選択すると入力画面が出てきます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-macro-full.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そして、ライトバージョンでは、コンパイラーのカスタムフラグを設定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-macro-flag.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;アイコンもライトバージョン用に追加、変更します。アイコンは、Assets.xcassetsより作成し、ターゲットにて設定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-add-icon.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-22-lite-icon-resource.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これで、ライトバージョンのターゲットが完成です。次に、ライトバージョンに広告を入れたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;admobの追加&#34;&gt;AdMobの追加&lt;/h2&gt;

&lt;p&gt;iAdは終了してしまいましたので、定番Googleの AdMob をインストールします。CocoaPods を使って簡単にプロジェクトに追加することもできるのですが、私の開発機の不思議な不具合でココポッドを設定していません。。ファイルを落としてフレームワークを追加という手動インストールをします。（また、近くCocoaPodsを使った方法をアップデートするかもしれません。とりあえずココポッドでのインストール時には、Podfileに &lt;code&gt;target &#39;xx lite&#39; do ...&lt;/code&gt; で切り分ければいいのかな。）&lt;/p&gt;

&lt;h3 id=&#34;フレームワーク&#34;&gt;フレームワーク&lt;/h3&gt;

&lt;p&gt;必要なフレームワークは、以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GoogleMobileAds.framework: Googleサイトよりダウンロード、プロジェクトに&lt;strong&gt;コピー&lt;/strong&gt; (ターゲットをライトバージョンのみにするのを忘れずに）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-24-admob-copy-framework.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;プロジェクトからターゲットを選択して、一番下のLinked Frameworks and Librariesより追加、コマンド＋クリックで複数選択可能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-24-admob-add-frameworks.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AdSupport&lt;/li&gt;
&lt;li&gt;AudioToolbox&lt;/li&gt;
&lt;li&gt;AVFoundation&lt;/li&gt;
&lt;li&gt;CoreGraphics&lt;/li&gt;
&lt;li&gt;CoreTelephony&lt;/li&gt;
&lt;li&gt;EventKit&lt;/li&gt;
&lt;li&gt;EventKitUI&lt;/li&gt;
&lt;li&gt;MessageUI&lt;/li&gt;
&lt;li&gt;StoreKit&lt;/li&gt;
&lt;li&gt;SystemConfiguration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上で準備完了。実装していきます。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;コーディング&#34;&gt;コーディング&lt;/h3&gt;

&lt;p&gt;マクロを使って、以下の形で処理を分けることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#if LITE
 	// ライトバージョンで行う処理
#else
 	// フルバージョンでの処理
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記の例は、テーブルビューを使ったアプリでの表示例になっています。テーブルビューのヘッダー部分に広告が表示されます。（実際に使っているコードから引用。）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import UIKit
import CoreData
#if LITE
import GoogleMobileAds
#endif

class ListTableViewController: UITableViewController,NSFetchedResultsControllerDelegate {

    #if LITE
    /// The banner view.
    let GADApplicationID = &amp;quot;ca-app-pub-xxxxxxx/xxxxxxx&amp;quot;
    var bannerView: GADBannerView!
    #endif
    
    .......

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        setNavigationBarGestures()
        self.tableView.showsVerticalScrollIndicator = false
        self.tableView.rowHeight = Cell.Height

      .......

        #if LITE
            loadAdmob()
        #endif
     }

	.......
	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アドモブ用の処理ファイルを別にします。こちらもターゲットをライトバージョンのみにします。（ちょっとすっきりする。）デレゲートにて広告を受け取ったときにテーブルヘッダーに表示する形をとってます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2016-08-24-admob-extensrion.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//
//  Admob.swift
//

import UIKit
import GoogleMobileAds

extension ListTableViewController: GADBannerViewDelegate {
    
    func loadAdmob() {
        print(&amp;quot;Google Mobile Ads SDK version: \(GADRequest.sdkVersion())&amp;quot;)
        
        bannerView = GADBannerView(adSize: kGADAdSizeSmartBannerPortrait)
        bannerView.adUnitID = GADApplicationID
        bannerView.delegate = self
        bannerView.rootViewController = self
//	For Debug      
//        let request:GADRequest = GADRequest()
//        request.testDevices = [kGADSimulatorID]
//        bannerView.loadRequest(request)
        bannerView.loadRequest(GADRequest())
    }
        
    func adViewDidReceiveAd(bannerView: GADBannerView!) {
        print(&amp;quot;Admob:adViewDidReceiveAd&amp;quot;)
        let adMobView = bannerView
        
        UIView.beginAnimations(&amp;quot;AdBannerMoveOnScreen&amp;quot;, context: nil)
        self.bannerView.frame = CGRectMake(0.0, 0.0,
                                           adMobView.frame.size.width, adMobView.frame.size.height)
        self.tableView.tableHeaderView = self.bannerView
        UIView.commitAnimations()
    }
    
    func adView(bannerView: GADBannerView!, didFailToReceiveAdWithError error: GADRequestError!) {
        UIView.beginAnimations(&amp;quot;ClearBannerView&amp;quot;, context: nil)
        bannerView.frame = CGRectMake(0.0, 0.0, bannerView.frame.size.width, 0.0)
        tableView.tableHeaderView = bannerView        
        UIView.commitAnimations()
    }
    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;割とあっさりと行きます。（こんな簡単だったけか？？なんか忘れてんのかと、ちと不安。。）&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>