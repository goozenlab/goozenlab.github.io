<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Develop on goozenlab</title>
    <link>http://goozenlab.com/categories/develop/</link>
    <description>Recent content in Develop on goozenlab</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>goozenlab@gmail.com (jin)</managingEditor>
    <webMaster>goozenlab@gmail.com (jin)</webMaster>
    <lastBuildDate>Thu, 18 Aug 2016 09:30:00 +0700</lastBuildDate>
    <atom:link href="http://goozenlab.com/categories/develop/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>イフレット</title>
      <link>http://goozenlab.com/blog/2016/08/if-let/</link>
      <pubDate>Thu, 18 Aug 2016 09:30:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/08/if-let/</guid>
      <description>&lt;p&gt;nil値が戻ってくる可能性のある時の処理方法。&lt;br /&gt;
&lt;code&gt;fatal error: unexpectedly found nil while unwrapping an Optional value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;tableCellに値を渡す時を例に、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# if let xx  = yy { } else { }

if let lock  = event.isLocked as? Bool {
    cell.isLocked = lock
} else {
    cell.isLocked = false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で新しく、&lt;code&gt;guard let&lt;/code&gt; なんてのが出てきて、こんな風に書き換える事ができ、（&lt;code&gt;else&lt;/code&gt;以降の役割がよくわからない。）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# guard let xx = y else {]

guard let lock  = event.isLocked as? Bool else { return }
cell.isLocked = lock

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしてしかも、簡略した（?：ニル、？：なの）&lt;code&gt;xx = yy ??&lt;/code&gt; もある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# xx = yy ??
cell.isLocked = event.isLocked as? Bool ?? false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本的に同じものなのだろうか？一番下のものがなんとなく分かりやすい気も個人的にはするのだが、あまり推奨はされていないようにも思われる。。。場合によって使い分けるのが良いのか。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>filteredArrayUsingPredicate</title>
      <link>http://goozenlab.com/blog/2016/08/array_filter/</link>
      <pubDate>Thu, 04 Aug 2016 18:30:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/08/array_filter/</guid>
      <description>&lt;p&gt;拙作dandoriのswift移行中、中々進みません。&lt;/p&gt;

&lt;p&gt;Objective-Cで使っていた、filteredArrayUsingPredicate が Swiftでは簡略化。.filterメソッドを使い、ブロックで処理を書き込みます。。。&lt;/p&gt;

&lt;p&gt;ブロック表記が出てくると目が点になってしまう私。。。&lt;/p&gt;

&lt;p&gt;以下 Objective-C での表記&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSArray *myTasks = [[NSArray alloc] initWithArray:[event.tasks allObjects]];
NSPredicate *hotPredicate = [NSPredicate predicateWithFormat:@&amp;quot;isRedHot == YES&amp;quot;];
NSArray *filteredArray = [myTasks filteredArrayUsingPredicate:hotPredicate];
return [filteredArray count] &amp;gt; 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swiftで書き上げにはブロック内に&lt;code&gt;(user: UserDetails) -&amp;gt; Bool in&lt;/code&gt; で書き込む方法もあり試すもエラーがでる。。あーーー、ブロック、、意味わからん。。。しかし、救いの神のNSPredicateを使った場合は以下、随分スッキリします。（こっちの方が全然良いわ。。&lt;code&gt;
$0.isRedHot = &amp;quot;YES&amp;quot;&lt;/code&gt; 何じゃかんじゃより。。）書き上げるとこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let myTasks = tasks?.allObjects
let predicate = NSPredicate(format: &amp;quot;isRedHot == YES&amp;quot;)
let filteredArray = myTasks?.filter( {
	predicate.evaluateWithObject($0)
	} )
return filteredArray!.count &amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>乱数を発生させる</title>
      <link>http://goozenlab.com/blog/2016/03/arc4random_uniform/</link>
      <pubDate>Fri, 18 Mar 2016 11:30:00 +0700</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2016/03/arc4random_uniform/</guid>
      <description>

&lt;h2 id=&#34;rand:dc776821942516eb940a9f207846a213&#34;&gt;rand()&lt;/h2&gt;

&lt;p&gt;今まではrand()使い、srand()にて乱数の初期化をし数値を得ていた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; srand(time(nil));
 rand()%300;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;arc4random-uniform:dc776821942516eb940a9f207846a213&#34;&gt;arc4random_uniform()&lt;/h2&gt;

&lt;p&gt;上記の形だとSwift時にエラーが出る為、乱数の初期化が不要な物に変更し以下の形に落ち着く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Int(arc4random_uniform(300))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>iOS 9.0.1</title>
      <link>http://goozenlab.com/blog/2015/09/ios901/</link>
      <pubDate>Fri, 25 Sep 2015 06:30:00 +0800</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/09/ios901/</guid>
      <description>&lt;p&gt;未だ実機にはiOS9を入れる事にためらいを感じているさなか、早くも9.0.1がリリースされる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-09-25-ios901.jpg&#34; alt=&#34;iOS9.0.1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修正点の中でも気になるのは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アラームやタイマーが鳴らないことがある問題を修正&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これが、拙作のサティで問題になっている音が出ない問題の解決になっていることをちょっと期待。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>XCode7とElCapitan</title>
      <link>http://goozenlab.com/blog/2015/09/xcode7-elcapitan/</link>
      <pubDate>Thu, 24 Sep 2015 13:30:00 +0800</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/09/xcode7-elcapitan/</guid>
      <description>&lt;p&gt;アプリの不具合がレポートされ、今更ながら、iOS9向けの開発環境を整える事にする。&lt;/p&gt;

&lt;p&gt;まず、取り急ぎ実機での検証は先回しにして、シミュレータでの検証のため、SSDの領域を削りElCapitan/XCode7をインストールする。（色々あったが割愛する。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-09-24-disk.jpg&#34; alt=&#34;Disk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;メインのマシーンが昨年からスペックダウンしてMBA11.2014/4GB.128SSDとなり、かなりタイトな環境。XCode7をインストールしてちょっと使ってみるが、、、、もっさり感と引っかかりが出始める、、
うぅ～～～、レイアウトも崩れているし、、バグもそれなりにありそう。。（溜息）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-09-24-xcode7-elcapitan.jpg&#34; alt=&#34;XCode7+ElCapitan&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iOS9での不具合：Satiの通知音</title>
      <link>http://goozenlab.com/blog/2015/09/ios9-bug-notifications/</link>
      <pubDate>Wed, 23 Sep 2015 15:30:00 +0800</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/09/ios9-bug-notifications/</guid>
      <description>&lt;p&gt;マインドフルな瞑想アプリのサティ、ユーザーの方からiOS9にアップデート以降、音が出なくなったとの報告を受けました。&lt;/p&gt;

&lt;p&gt;iOS8がリリースされた時にも、通知で音を出すには事前認証が必須になり、認証のプロセスを追加していなかったので、新規ユーザーの人たちには音が出ないという致命的なバグがありました。OSをアップデートしたインストール済のユーザーには不具合は無かったので、３ヶ月くらい放置していました。&lt;/p&gt;

&lt;p&gt;そして、今回もappleの新しい省電力モードや通知機能の拡張により（多分）、同様の不具合が発生。&lt;/p&gt;

&lt;p&gt;自分の検証端末がiPhone4S/iOS8.1のため、iOS9へのアップデートはちょっと悩んでいて、、
しかも、開発環境は未だマーベリックスを使っているため、iOS9向けの開発環境が未だ整っていない状態です。
iOS9自体はブラッシュアップ的なアプデートだと認識していたので、まぁ、大丈夫だろうとたかを括ってました。&lt;/p&gt;

&lt;p&gt;ネットでちょっと調べて見た所、似たような現象が起こっているのを幾つか発見しました。音の出ない瞑想タイマーではまるっきり体をなさないので、環境を整えて、なるべく速くアップデートしたいと思います。&lt;/p&gt;

&lt;p&gt;何か他にも不具合等が起こりましたら、連絡のほどよろしくお願いします。&lt;/p&gt;

&lt;p&gt;では、ロシアより愛を込めて、&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iOS9にて気になる機能の3DTouch</title>
      <link>http://goozenlab.com/blog/2015/09/3dtouch/</link>
      <pubDate>Sun, 20 Sep 2015 09:30:00 +0800</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/09/3dtouch/</guid>
      <description>&lt;p&gt;iOS9にて操作動作が、強押し、さらに押込押しと深みが出る。
アップルの使い方のガイドラインではピーク＆ポップという形。
その対象に対しての関心の度合いを操作にしたいう感じ。&lt;/p&gt;

&lt;p&gt;自分のアプリで使っている長押しと被るような感じがあるのだが、どう追加して行くか考えている。&lt;/p&gt;

&lt;p&gt;例）リトリスト（todoアプリ）にて、&lt;br /&gt;
メニューバーの長押しでリストからホットリスト（重要項目のリスト）に移動するようになっている。
これは、強押しで重要項目の表示、さらに押して移動という形にできる。&lt;/p&gt;

&lt;p&gt;：おまけ：&lt;br /&gt;
自分の検証端末はいまだに iPhone4S （自分の中ではデザイン的に理想の携帯。母から契約終了端末を引き継ぐ）。iPhone6Sは機能的には惹かれるが、どうもハードのデザインに魅力を感じない。次のiphone7でフルモデルチェンジを期待。&lt;/p&gt;

&lt;p&gt;バイカル湖、オリフォン島
&lt;img src=&#34;http://goozenlab.com/images/2015-09-06-baikal.jpg&#34; alt=&#34;Olphon&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NSUserDefaultsのキーの削除</title>
      <link>http://goozenlab.com/blog/2015/07/userdefaults-remove-keys/</link>
      <pubDate>Mon, 27 Jul 2015 18:30:00 +0500</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/07/userdefaults-remove-keys/</guid>
      <description>&lt;p&gt;アップデートをするたびに名前を変更したり、増えたり、減ったりしてグジャグジャになってしまう UserDefaults。私だけでは無いはず。。&lt;/p&gt;

&lt;p&gt;既に設定してしまったUserDefaultsのキーを削除する方法は以下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[NSUserDefaults standardUserDefaults] removeObjectForKey:@&amp;quot;kFontName&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アップデート時に実行させれば奇麗なままのUserDefaultを維持する事ができます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>midXで中心を求める</title>
      <link>http://goozenlab.com/blog/2015/07/midx-swift/</link>
      <pubDate>Sat, 11 Jul 2015 09:30:00 +0600</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/07/midx-swift/</guid>
      <description>&lt;p&gt;今までは中心を求めるのに素直に、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let center: CGFloat = self.frame.width / 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と行ってきたけれども、.midX/midY&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let center: CGFloat = self.frame.midX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とスマート、かつ格好良くできます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>テーブルビューセルの境界線を消す</title>
      <link>http://goozenlab.com/blog/2015/04/tableview-separator/</link>
      <pubDate>Mon, 06 Apr 2015 19:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/04/tableview-separator/</guid>
      <description>&lt;p&gt;テーブルビューセルの境界線を消すには下記のコードを追加。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.tableView.separatorStyle = UITableViewCellSeparatorStyle.None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;StoryBoardを使っている時は以下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-04-06-separator.png&#34; alt=&#34;Separator&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ShakeはUIEventで</title>
      <link>http://goozenlab.com/blog/2015/03/swift-shake/</link>
      <pubDate>Fri, 27 Mar 2015 11:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/swift-shake/</guid>
      <description>&lt;p&gt;色々と書き込んでいたシェイクの判別は&lt;code&gt;UIEvent&lt;/code&gt;を使うようになります。
えらく簡単になりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    override func viewDidAppear(animated: Bool) {
        super.viewDidAppear(animated)
        self.becomeFirstResponder()
    }
    
    override func canBecomeFirstResponder() -&amp;gt; Bool {
        return true
    }
    
    override func motionEnded(motion: UIEventSubtype, withEvent event: UIEvent!) {
        if(event.subtype == UIEventSubtype.MotionShake) {
            // 
            // 処理
            //
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-26-shake-swift.png&#34; alt=&#34;swift shake&#34; /&gt;&lt;/p&gt;

&lt;p&gt;※まぁ、間違っちゃーいね〜な。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>performSelectorは無くなる</title>
      <link>http://goozenlab.com/blog/2015/03/performselector-timer/</link>
      <pubDate>Thu, 26 Mar 2015 10:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/performselector-timer/</guid>
      <description>&lt;p&gt;ほぼ全ての拙作のアプリでは、テーブルセルでのバーの色変更タップとアップデートは時間差を使って行っています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[NSObject cancelPreviousPerformRequestsWithTarget:self
                                         selector:@selector(notifiyUpdate)
                                           object:nil];
[self performSelector:@selector(notifiyUpdate)
           withObject:nil
           afterDelay:kUpdateCellShortInterval];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;object-cで上記に書かれた&lt;code&gt;performSelector&lt;/code&gt;はSwiftでは無くなってしまったようなので、以下のコードでは動かない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; NSObject.cancelPreviousPerformRequestsWithTarget(self, selector: notify, object: nil)
 NSObject.performSelector(notify, withObject: self, afterDelay: Interval.UpdateCell)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;幾つかの方法があるようですが、タイマーを使った方法が簡易でよいのですが、&lt;code&gt;cancelPreviousPerformRequestsWithTarget&lt;/code&gt;が無用になってしまう。処理の事前キャンセルも必要があるので、少し修正して最終的には以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private var tapTimer: NSTimer?

// 処理
cancelTimer()
tapTimer = NSTimer.scheduledTimerWithTimeInterval(Interval.UpdateCell, target: self, selector:  notify, userInfo: nil, repeats: false)
//

func cancelTimer() {
    if tappingTimer != nil {
        tappingTimer!.invalidate()
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>printlnは気楽</title>
      <link>http://goozenlab.com/blog/2015/03/println-swift/</link>
      <pubDate>Wed, 25 Mar 2015 08:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/println-swift/</guid>
      <description>&lt;p&gt;NSLogはまだ使えるようですが、swiftではprintln をログの書出しに使います。NSLogだとよく使っていた、 &lt;code&gt;__PRETTY_FUNCTION__&lt;/code&gt; は&lt;/p&gt;

&lt;p&gt;Swift では &lt;code&gt;__FILE__, __FUNCTION__, __LINE__ and __COLUMN__&lt;/code&gt; のようになります。
使えそうなのは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__FILE__&lt;/code&gt;  ：ファイル名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__LINE__&lt;/code&gt; ：ライン番号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__FUNCTION__&lt;/code&gt; ：ファンクション名&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして、値を表示したい時はそのままかそのままか&lt;code&gt;\(...)&lt;/code&gt;で囲み適当に放り込む。もはや%dや%@は必要ないらしい。
小賢しいウォーニングも出なくなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;println(__FUNCTION__, self.frame)
println(__FUNCTION__,&amp;quot;screen is \(self.frame)&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;戻りは以下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(function, (0.0,706.0,414.0,30.0))
(function, screen is (0.0,706.0,414.0,30.0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swift Programming Language に書いてあるらしいので読むべ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NSDate() = [NSDate date]</title>
      <link>http://goozenlab.com/blog/2015/03/nsdate-swift/</link>
      <pubDate>Tue, 24 Mar 2015 08:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/nsdate-swift/</guid>
      <description>&lt;p&gt;NSDateでの &lt;code&gt;[NSDate date]&lt;/code&gt; はシンプルにイニシャライザーに統合され？、Swiftでは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSDate()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でよろしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[NSDate dateWithTimeIntervalSinceNow:hoursGoodSleep * 60 * 60]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を、Swiftで書いてみると、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSDate(timeIntervalSinceNow: hoursGoodSleep * 60 * 60)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーが出る。hoursGoodSleep は Float だし抜かりは無いような、、、&lt;br /&gt;
正しくは、&lt;code&gt;Double&lt;/code&gt;でエラーは消える。こうゆう所は割と厳しいのね。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ビューサイクルとアプリ復帰時の処理</title>
      <link>http://goozenlab.com/blog/2015/03/view-cycle/</link>
      <pubDate>Sat, 21 Mar 2015 12:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/view-cycle/</guid>
      <description>

&lt;p&gt;たまに、何処に何の処理を入れれば良いか分からなくなるので、簡単にまとめる。&lt;/p&gt;

&lt;h2 id=&#34;起動時:e0af111a0289018acd229891e1617ab3&#34;&gt;起動時&lt;/h2&gt;

&lt;p&gt;アプリの起動時には以下の順で呼ばれる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;viewDidLoad()&lt;/li&gt;
&lt;li&gt;viewWillAppear&lt;/li&gt;
&lt;li&gt;viewDidAppear　※すべての画像の処理が終わった後に呼ばれる。あまり使っていない。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;モーダルビューより復帰:e0af111a0289018acd229891e1617ab3&#34;&gt;モーダルビューより復帰&lt;/h2&gt;

&lt;p&gt;モーダルビューより戻ってくると以下の処理が再び呼ばれる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;viewWillAppear&lt;/li&gt;
&lt;li&gt;viewDidAppear&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ロック-スリープからの復帰時:e0af111a0289018acd229891e1617ab3&#34;&gt;ロック・スリープからの復帰時&lt;/h2&gt;

&lt;p&gt;ロック・スリープからの復帰は処理が行われない（厳密には、AppDelegate内では呼ばれる）ので、アプリの戻ってきた時の処理を追加する。
viewDidLoadに通知の設定する事で可能になる。&lt;code&gt;Setting.bundle&lt;/code&gt;でフォントの設定等を変更し、アプリに戻ってきた時に使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Notification Center
let app: UIApplication = UIApplication.sharedApplication()
NSNotificationCenter.defaultCenter().addObserver(self, 
        selector: &amp;quot;applicationWillEnterForeground:&amp;quot;, name: UIApplicationWillEnterForegroundNotification, 
        object: app)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と処理を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func applicationWillEnterForeground(notification: NSNotification) {
    println(__FUNCTION__)
    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;スリープに移行時:e0af111a0289018acd229891e1617ab3&#34;&gt;スリープに移行時&lt;/h2&gt;

&lt;p&gt;逆にスリープに入る時には復帰時と同じで、&lt;code&gt;ApplicationWillEnterForeground&lt;/code&gt; の代わりに &lt;code&gt;ApplicationDidEnterBackground&lt;/code&gt; を使えば良い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; NSNotificationCenter.defaultCenter().addObserver(self, selector: &amp;quot;applicationDidEnterBackground:&amp;quot;, name: UIApplicationDidEnterBackgroundNotification, object: app)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>