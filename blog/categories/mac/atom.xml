<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mac | goozenlab]]></title>
  <link href="http://goozenlab.github.com/goozenlab/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://goozenlab.github.com/goozenlab/"/>
  <updated>2014-12-09T22:20:31+07:00</updated>
  <id>http://goozenlab.github.com/goozenlab/</id>
  <author>
    <name><![CDATA[jin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MBA11を10日間使ってみて]]></title>
    <link href="http://goozenlab.github.com/goozenlab/blog/2014/11/21/mba11-review/"/>
    <updated>2014-11-21T20:20:00+07:00</updated>
    <id>http://goozenlab.github.com/goozenlab/blog/2014/11/21/mba11-review</id>
    <content type="html"><![CDATA[<p>10日間ぐらいMBA11を使ってみて思った事を今更ながら書く。</p>

<p><img src="/images/2014-11-21-mba11.jpg" alt="MBA11" /></p>

<ol>
<li>軽い。</li>
<li>小さい。</li>
<li>電池の保ちが期待以上によい。ほぼ一日使える。</li>
<li>付属のアダプターが小さい割には充電も早い。タイは200Vだからなのか１時間くらいでフルチャージになる。</li>
<li>キーの感じは最初はすごく薄くペタペタで窮屈な感じがしたけれど、違和感は減り馴染む。</li>
<li>液晶はやはり小さい。懸念の肩こりも現状維持。</li>
<li>テカテカ液晶は自分の顔が反射して見えたりして好きではないが、ギラギラはしてないのでギリギリセーフ。</li>
<li>RAM 4GBでは足りないだろうと思ったが、今のところそこまでスピードが遅くなる事はなく小気味よく動いている。</li>
<li>CPUパフォーマンスも期待以上によい。重い画像の編集などはしませんが、簡単なグラフィックの制作や、Xcodeでのビルドなどもストレスなく行える。</li>
<li>128GB SSDはメディアを入れたり、ウィンドウズを入れるならちょっと足りないだろう。（私は現時点で残り45GB)</li>
<li>SDカードスロットは無くても別に困らない。デジカメ等のデーター取り込みもUSB接続で私の場合は気にならない。</li>
<li>スピーカーの音質は悪い。</li>
<li>お腹の上にのっけて使ってもそこまで熱くならず、（逆に冬場だと気持ちよいかもしれない、）重さで肋骨や下腹部が痛くなる事もない。ただ、液晶がもう少し奥まで倒れたら最高。</li>
<li>キーボードに印字されているタイ語にちょっと愛着がわく。</li>
<li>OSは結局、XCode5が動くマーベリックがメインになる。（うれしい事にMBP15-MountainLionのディスクでも起動する。）</li>
</ol>


<p>と、期待をよい意味で裏切られました、ほとんどネガティブな事のない大絶賛マシーン、外に持ち出すなら最強だと思います。（特にセカンドマシーンして）</p>

<p>ちょっとうれしかったのでポストする。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さよならMBP15、サワディクラップMBA11]]></title>
    <link href="http://goozenlab.github.com/goozenlab/blog/2014/11/10/mabbookair9/"/>
    <updated>2014-11-10T14:20:00+07:00</updated>
    <id>http://goozenlab.github.com/goozenlab/blog/2014/11/10/mabbookair9</id>
    <content type="html"><![CDATA[<p>さよなら、MBP15、サワディクラップ、MBA11。</p>

<p>タイにきて端末が壊れる、2011初期型によくあるグラフィックボードの故障らしく、数日間変調の兆しがあり、あっさり逝ってしまう。このまま、開発作業も中途半端に投げ捨ててしまおうかとも思うが、iOS8への対応も中途半端。日本で修理に出すも日本を出たばかりだから、帰国時の来年の秋か無理をして春。</p>

<!-- more -->


<p>本当は来年の２月頃発表になる12インチのMBA Retinaで機材をフルリニューアルするつもりでいた。思わぬ出来事に２•３日どうしようかと悩む。ここタイで直すという選択肢もあるが、タイには正規なアップルショップはまだなく、時間もかなりかかり信頼もできない。</p>

<p>MBP15は開発が一段落終えたらタイに置いて出るつもりでいたので、旅に持っていく事を理由付けにして、MBA11 w/US Keyboard+RAM8GBを目当てにタイのアップル代理店iStudioへ行く。カスタム仕様だとアメリカに注文を出すらしく２週間はかかるらしく、在庫はノーマルのタイ語キーボードの物しかないとの事。さすが王国だけあって外人には媚びていない。ある意味商売べたでもある。金額は免税の処置をしても昨今の急激な円安のせいでタイで買うお得感が全くない。日銀に恨み節。。無駄遣い感がぬぐい去れない。購入意欲が一気に減少する。</p>

<p>ちょっと考えるといって店を出て、代理店の入っているショッピングセンター内を５分くらいフラフラと歩く。独り言をぶつぶつと呟く。タイのキーボードはUSと同じレイアウトなので、日本に帰ったらキーボードカバーをつければよい、タイの文字が入っているのも記念だし、と、儲けたら、どこかの孤児院にでも寄付すればいいかと、買う方向にモーチベーションも持っていく。</p>

<p>店に戻り、お兄さん、やっぱり持って帰るわとクレジットカードで購入。あっという間。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yosemite]]></title>
    <link href="http://goozenlab.github.com/goozenlab/blog/2014/10/20/yosemite/"/>
    <updated>2014-10-20T14:20:00+07:00</updated>
    <id>http://goozenlab.github.com/goozenlab/blog/2014/10/20/yosemite</id>
    <content type="html"><![CDATA[<p>Yosemiteが発表、ダウンロードが可能になる。山猫をメインに使っていたが、ここ１ヶ月近く開発者向けのベーターを試用していた。マーベリックを飛ばすが、体感的にスピードが落ちている感じはないし、iOS8向けの開発にはマーベリック以上が必要という事でディスクを切り分けてクリーンインストールをする事にした。怪しげな物もを処分、メキシコのテピートで購入したアドビのCS3やバンコクで買ったオフィスなどからもとうとう卒業できそうな予感。</p>

<p>本体のSSDをバックアップをしようとCCCを使うが、エラーが起きたり、立ち上がらなかったりと厄介な事になる。代替をネットで探すと、OSXのDiskUtilityのRestore(復元）で別パーティションに丸まるコピーができると知る。DiskUtilityでは、パーティションのサイズが変えられたりと気がついたらかなりバージョンアップしてる。ちょっとびっくり。しかしヨセミテではなぜだか論理ディスクを採用なのか、インストール後のパーティションのリザイズが出来なくなる。改悪で最悪だ、イラッとする。</p>

<p>Xcodeで面倒な不具合があったりで、未だメインは山猫。Yosemite自体の印象は悪くないのでもう少し落ち着いたらじわじわ移行するつもり。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromiumの半自動更新]]></title>
    <link href="http://goozenlab.github.com/goozenlab/blog/2013/07/27/chromium-auto-update/"/>
    <updated>2013-07-27T10:07:00+07:00</updated>
    <id>http://goozenlab.github.com/goozenlab/blog/2013/07/27/chromium-auto-update</id>
    <content type="html"><![CDATA[<p>ここ最近、ウイルスに感染したかのようにサファリが良く落ちます。
ということで、Chromeから余計な機能を抜いたChromiumに変更しました。</p>

<p>{% img  https://dl.dropbox.com/u/163521/images/2013-07-27-chromium.png 800  %}</p>

<p>ただし、Chromiumにはオートアップグレード機能（余計な機能の一つ）は付いていません。自分でビルドしてねというスタンス。定期的にXCodeでビルドして使うのはちょっと、、面倒ならChromeを使ってということなのでしょう。</p>

<p>ちょっと調べてみたところ、最新版をビルドしまくっている<a href="https://chromium-build.appspot.com/p/chromium/console">サイト</a>があり、スクリプトを使って最新版に更新できることを<a href="http://hints.macworld.com/article.php?story=20090604081030791">MacWorld</a>で見つけました。（スクリプトは少し調整してます。）</p>

<p>※ 普通にサイトよりダウンロードも出来ます。<a href="https://download-chromium.appspot.com/">こちら</a>から。ずいぶん控えめなところにダウンロードのリンクがあります。<br/>
　情報元:<a href="http://www.chromium.org/getting-involved/download-chromium">http://www.chromium.org/getting-involved/download-chromium</a></p>

<p>ターミナルにてスクリプトを実行します。（スクリプト名はchromium_update.shにしています。）</p>

<p>```
gallo% sh ./chromium_update.sh
Setup...
Checking current version...
 * your/latest build: 8d391c3ad2f0846e9d1366c5d1de5f1b797d799f / 10a20c605130a26efce0e5640c4a7d56a706f5bf
Downloading and unpacking...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</p>

<pre><code>                             Dload  Upload   Total   Spent    Left  Speed
</code></pre>

<p>100 53.0M  100 53.0M    0     0  1453k      0  0:00:37  0:00:37 --:--:-- 1282k
Installing...
Done. You're now running build 10a20c605130a26efce0e5640c4a7d56a706f5bf
gallo%
```</p>

<p>ローカルのアプリが最新であれば、</p>

<p><code>
gallo% sh ./chromium_update.sh
Setup...
Checking current version...
 * your/latest build: 8d391c3ad2f0846e9d1366c5d1de5f1b797d799f / 8d391c3ad2f0846e9d1366c5d1de5f1b797d799f
 * build 8d391c3ad2f0846e9d1366c5d1de5f1b797d799f is the latest one.
gallo%
</code></p>

<!-- more -->


<p>と、かなり手入らずです。スクリプトは以下。今のところ問題なく安定して動いてます。一日に数回アップデートされているようです。</p>

<p>{% codeblock chromium_update.sh %}</p>

<h1>!/bin/sh</h1>

<h1>Get current build for Chromium on Mac.</h1>

<h1></h1>

<h1>@version  2009-05-22</h1>

<h1>@author   XXXX</h1>

<h1>@todo     Nothing yet</h1>

<h1>http://hints.macworld.com/article.php?story=20090604081030791</h1>

<h1>setup ------------------------------------------------------------------------</h1>

<p>tempDir="/tmp/<code>whoami</code>/chrome-nightly/";
baseURL="http://commondatastorage.googleapis.com/chromium-browser-snapshots/Mac";
baseName="chrome-mac";
baseExt="zip";
appName="Chromium.app";
appDir="/Applications";
version=~/.CURRENT_CHROME;</p>

<h1>------------------------------------------------------------------------------</h1>

<h1>------------------------------------------------------------------------------</h1>

<p>function checkForErrors {</p>

<pre><code>if [ "$?" != "0" ]; then
    echo "Unkown error (see above for help)!";
    exit 3;
fi
</code></pre>

<p>}</p>

<h1>------------------------------------------------------------------------------</h1>

<h1>------------------------------------------------------------------------------</h1>

<p>echo "Setup...";
mkdir -p "$tempDir";
cd "$tempDir";
checkForErrors;</p>

<h1>------------------------------------------------------------------------------</h1>

<h1>------------------------------------------------------------------------------</h1>

<p>echo "Checking current version...";
touch $version
currentVersion=<code>cat $version</code>;
latestVersion=<code>curl -s $baseURL/LAST_CHANGE</code>;
checkForErrors;
echo " * your/latest build: $currentVersion / $latestVersion";
if [ "$currentVersion" == "$latestVersion" ]; then</p>

<pre><code>echo " * build $currentVersion is the latest one.";
exit 1;
</code></pre>

<p>fi</p>

<h1>------------------------------------------------------------------------------</h1>

<h1>------------------------------------------------------------------------------</h1>

<p>echo "Downloading and unpacking...";
chromePID=<code>ps wwaux|grep -v grep|grep "$appName"|awk '{print $2}'</code>;
if [ "$chromePID" != "" ];then</p>

<pre><code>echo " * chromium is running. Please stop it first.";
exit 2;
</code></pre>

<p>fi
curl -o $baseName.$baseExt "$baseURL/$latestVersion/$baseName.$baseExt";</p>

<p>unzip -qo $baseName.$baseExt;
checkForErrors;</p>

<h1>------------------------------------------------------------------------------</h1>

<h1>------------------------------------------------------------------------------</h1>

<p>echo "Installing...";
cp -r $baseName/$appName $appDir
checkForErrors;
echo $latestVersion > $version;</p>

<h1>------------------------------------------------------------------------------</h1>

<h1>------------------------------------------------------------------------------</h1>

<p>echo "Done. You're now running build $latestVersion";</p>

<h1>------------------------------------------------------------------------------</h1>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[画面のグレー/カラーのスイッチ]]></title>
    <link href="http://goozenlab.github.com/goozenlab/blog/2013/02/25/applescript-switch-grayscale/"/>
    <updated>2013-02-25T10:15:00+07:00</updated>
    <id>http://goozenlab.github.com/goozenlab/blog/2013/02/25/applescript-switch-grayscale</id>
    <content type="html"><![CDATA[<p>最近、ディスプレイを白黒（グレースケール）の表示にしています。そのためグラフィックの作業をする時や、ウェブサイトをカラーで見たい時等はカラーでとシステム環境に出たり入ったりする機会が増えました。</p>

<p>ただ一連の作業がちょっと面倒なので、<strong>アップルスクリプト</strong>＋Alfredを使って作業を簡略化しました。</p>

<p>まずはアップルスクリプトエディタでスクリプトを書きます。色々と調べて割と大変だったのですが仕上がってみるとすごくシンプルです。</p>

<p><strong>※</strong> MountainLionにて動かしてます。SnowLeopardではシステム環境のレイアウトが違ったはずなのでちょっと修正が必要だと思います。</p>

<!-- more -->


<p>``` applescript SwitchBW/Color</p>

<p>tell application "System Preferences"</p>

<pre><code>activate
set current pane to pane "com.apple.preference.universalaccess"
</code></pre>

<p>end tell</p>

<p>tell application "System Events"</p>

<pre><code>tell first window of process "System Preferences"

    tell table 1 of scroll area 1
        set selected of row 2 to true
    end tell
    tell group 1
        click checkbox "Use grayscale"
    end tell

end tell
</code></pre>

<p>end tell</p>

<p>do shell script "terminal-notifier -message \"Color mode has been changed.\" -title \"Diplay\""</p>

<p>tell application "System Preferences" to quit</p>

<p>```</p>

<p>画面上のパーツをどういう風に書いてよいのか分からず四苦八苦しましたが（９行〜１４行目）、下記のコードを走らせる事でGUIのパーツをリスト化してくれます。</p>

<p>``` applescript UIElementのリスト
tell application "System Preferences"</p>

<pre><code>activate
set current pane to pane "com.apple.preference.universalaccess"
--  set current pane to pane "com.apple.preference.sound"
</code></pre>

<p>end tell</p>

<p>tell application "System Events"</p>

<pre><code>if UI elements enabled then
    tell process "System Preferences"
        get every UI element
        --tell tab group 1 of window "Sound" of application process "System Preferences" of application "System Events"
        tell window 1 of application process "System Preferences" of application "System Events"
            --  tell table 1 of scroll area 1 of window 1 of application process "System Preferences" of application "System Events" これで左にあるテーブルの情報が見れます
            get every UI element
            get every UI element of every UI element
        end tell
    end tell
else
    tell application "System Preferences"
        activate
        set current pane to pane "com.apple.preference.universalaccess"
        display dialog "UI element scripting is not enabled."
    end tell
end if
</code></pre>

<p>end tell
```</p>

<p><img src="https://dl.dropbox.com/u/163521/images/2013-02-25-checkUIElements.png" alt="UIElement" /></p>

<p><code>checkbox "Use grayscale" of group 1 of window "Accessibility" of application process "System Preferences" of application "System Events"</code>でこのgroup 1の"Use grayscale"をクリックすれば良い事が分かります。表記の仕方がいくつかあるようで、click checkbox "Use grayscale"はclick checkbox 2、window "Accessibility"はwindow 1, first windowでも動きます。</p>

<p>後はそのパーツに値を入れてあげれば良し。</p>

<p>そして、スクリプトエディターからプログラムとして保存します。私は~/Library/Scriptsに保存してます。そして、お勧めランチャーのアルフレッドに~/Library/Scriptsを登録します。私の環境では以前やって登録したような、、、問題なく動いてます。</p>

<p>スクリプトで登録して、スクリプトメニューバーから操作も可能です。スクリプトエディターの環境設定にメニューバー登録の設定の箇所があります。</p>

<p>アップルスクリプトでいろんな事が出来るのにちょっと驚きです。</p>

<p>ただ、、別にコンピューターの処理速度が遅い訳ではないでしょうが、バシッとは変わらず</p>

<p>、、、トッ（環境設定が立ち上がり）、、、、、（ちょっと心配になる）、、パッ 。</p>

<p>と変わります。この間は一体？？動きの遅いおじいちゃんのようです。しかもアプリケーションで保存したもののほうがなぜか遅いです。ちょっと気が抜けます。</p>

<h2>おまけ</h2>

<p>ドックにアップルスクリプトのアイコンが出てくるのがちょっと、と思う方は、アプリケーションのパッケージ内にある<code>Info.plist</code>に</p>

<p>``` plain</p>

<pre><code>&lt;key&gt;LSUIElement&lt;/key&gt;
&lt;true/&gt;
</code></pre>

<p>```</p>

<p>を追加すると、ドックにアプリケーションのアイコンは表示されません。</p>

<p>そしてついでにノーティフィケーションセンターに登録。terminal-notifierというソフトをつかいます。アップルスクリプトに</p>

<p><code>
do shell script "terminal-notifier -message \"Color mode has been changed.\" -title \"Diplay\""
</code></p>

<p>を追加して、ノーティフィケーションセンターに告知します。インストールと簡単な使い方の説明はマイナビニュースの<a href="http://news.mynavi.jp/column/osxhack/060/index.html">こちらの記事</a>を参照してください。</p>

<p>お次ぎはUSBオーディオの選択/解除かな。。</p>
]]></content>
  </entry>
  
</feed>
