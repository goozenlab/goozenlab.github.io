<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>goozenlab</title>
    <link>http://goozenlab.com/</link>
    <description>Recent content on goozenlab</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>goozenlab@gmail.com (jin)</managingEditor>
    <webMaster>goozenlab@gmail.com (jin)</webMaster>
    <lastBuildDate>Fri, 27 Mar 2015 11:30:00 +0545</lastBuildDate>
    <atom:link href="http://goozenlab.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ShakeはUIEventで</title>
      <link>http://goozenlab.com/blog/2015/03/swift-shake/</link>
      <pubDate>Fri, 27 Mar 2015 11:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/swift-shake/</guid>
      <description>&lt;p&gt;色々と書き込んでいたシェイクの判別は&lt;code&gt;UIEvent&lt;/code&gt;を使うようになります。
えらく簡単になりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    override func viewDidAppear(animated: Bool) {
        super.viewDidAppear(animated)
        self.becomeFirstResponder()
    }
    
    override func canBecomeFirstResponder() -&amp;gt; Bool {
        return true
    }
    
    override func motionEnded(motion: UIEventSubtype, withEvent event: UIEvent!) {
        if(event.subtype == UIEventSubtype.MotionShake) {
            // 
            // 処理
            //
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-26-shake-swift.png&#34; alt=&#34;swift shake&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;※まぁ、間違っちゃーいね〜な。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>littlist v2.6.6</title>
      <link>http://goozenlab.com/blog/2015/03/littlist-266/</link>
      <pubDate>Fri, 27 Mar 2015 10:00:47 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/littlist-266/</guid>
      <description>&lt;p&gt;データーベースの更新により起きた、幾つかのバグを修正しました。
どちらもあまり気分の良くない、溜息まじりなケアレスミスなバグです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&amp;ldquo;RedHot List&amp;rdquo; と &amp;ldquo;期日付き&amp;rdquo; の表示で落ちるバグ&lt;/li&gt;
&lt;li&gt;編集画面で、期日をオフにしてもオフにならないバグ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;申請が通り、アプストアに復帰しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>performSelectorは無くなる</title>
      <link>http://goozenlab.com/blog/2015/03/performselector-timer/</link>
      <pubDate>Thu, 26 Mar 2015 10:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/performselector-timer/</guid>
      <description>&lt;p&gt;ほぼ全ての拙作のアプリでは、テーブルセルでのバーの色変更タップとアップデートは時間差を使って行っています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[NSObject cancelPreviousPerformRequestsWithTarget:self
                                         selector:@selector(notifiyUpdate)
                                           object:nil];
[self performSelector:@selector(notifiyUpdate)
           withObject:nil
           afterDelay:kUpdateCellShortInterval];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;object-cで上記に書かれた&lt;code&gt;performSelector&lt;/code&gt;はSwiftでは無くなってしまったようなので、以下のコードでは動かない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; NSObject.cancelPreviousPerformRequestsWithTarget(self, selector: notify, object: nil)
 NSObject.performSelector(notify, withObject: self, afterDelay: Interval.UpdateCell)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;幾つかの方法があるようですが、タイマーを使った方法が簡易でよいのですが、&lt;code&gt;cancelPreviousPerformRequestsWithTarget&lt;/code&gt;が無用になってしまう。処理の事前キャンセルも必要があるので、少し修正して最終的には以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private var tapTimer: NSTimer?

// 処理
cancelTimer()
tapTimer = NSTimer.scheduledTimerWithTimeInterval(Interval.UpdateCell, target: self, selector:  notify, userInfo: nil, repeats: false)
//

func cancelTimer() {
    if tappingTimer != nil {
        tappingTimer!.invalidate()
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NSDate() = [NSDate date]</title>
      <link>http://goozenlab.com/blog/2015/03/nsdate-swift/</link>
      <pubDate>Tue, 24 Mar 2015 08:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/nsdate-swift/</guid>
      <description>&lt;p&gt;NSDateでの &lt;code&gt;[NSDate date]&lt;/code&gt; はシンプルにイニシャライザーに統合され？、Swiftでは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSDate()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でよろしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[NSDate dateWithTimeIntervalSinceNow:hoursGoodSleep * 60 * 60]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を、Swiftで書いてみると、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSDate(timeIntervalSinceNow: hoursGoodSleep * 60 * 60)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーが出る。hoursGoodSleep は Float だし抜かりは無いような、、、&lt;br /&gt;
正しくは、&lt;code&gt;Double&lt;/code&gt;でエラーは消える。こうゆう所は割と厳しいのね。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Xcode 6.2</title>
      <link>http://goozenlab.com/blog/2015/03/xcode62-downloaded/</link>
      <pubDate>Sun, 22 Mar 2015 17:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/xcode62-downloaded/</guid>
      <description>&lt;p&gt;ポカラを出て、カトマンズに到着するも、宿が珍しくフルという事でドゥリケルまで移動する。&lt;/p&gt;

&lt;p&gt;宿のネットがスピードは相変わらずだが、割と安定しているようなのでXcodeのダウンロードを再びチャレンジする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-22-xcode62-downloaded.png&#34; alt=&#34;XCode 6.2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;二日掛かりました。これで、iOS8.2にアップデートしてしまった実機にアプリをインストールできる。。&lt;/p&gt;

&lt;p&gt;追記：１ヶ月ぶりに戻ってきて、いつも朝にお世話になっているサモサ屋のサモサが一回り半くらい近く小さくなっている。。衝撃。。でも、まぁ10ルピーですし、、&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ビューサイクルとアプリ復帰時の処理</title>
      <link>http://goozenlab.com/blog/2015/03/view-cycle/</link>
      <pubDate>Sat, 21 Mar 2015 12:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/view-cycle/</guid>
      <description>

&lt;p&gt;たまに、何処に何の処理を入れれば良いか分からなくなるので、簡単にまとめる。&lt;/p&gt;

&lt;h2 id=&#34;起動時:205901421f8bb17c75d7ebf5b8a21af9&#34;&gt;起動時&lt;/h2&gt;

&lt;p&gt;アプリの起動時には以下の順で呼ばれる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;viewDidLoad()&lt;/li&gt;
&lt;li&gt;viewWillAppear&lt;/li&gt;
&lt;li&gt;viewDidAppear　※すべての画像の処理が終わった後に呼ばれる。あまり使っていない。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;モーダルビューより復帰:205901421f8bb17c75d7ebf5b8a21af9&#34;&gt;モーダルビューより復帰&lt;/h2&gt;

&lt;p&gt;モーダルビューより戻ってくると以下の処理が再び呼ばれる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;viewWillAppear&lt;/li&gt;
&lt;li&gt;viewDidAppear&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ロック-スリープからの復帰時:205901421f8bb17c75d7ebf5b8a21af9&#34;&gt;ロック・スリープからの復帰時&lt;/h2&gt;

&lt;p&gt;ロック・スリープからの復帰は処理が行われない（厳密には、AppDelegate内では呼ばれる）ので、アプリの戻ってきた時の処理を追加する。
viewDidLoadに通知の設定する事で可能になる。&lt;code&gt;Setting.bundle&lt;/code&gt;でフォントの設定等を変更し、アプリに戻ってきた時に使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Notification Center
let app: UIApplication = UIApplication.sharedApplication()
NSNotificationCenter.defaultCenter().addObserver(self, 
        selector: &amp;quot;applicationWillEnterForeground:&amp;quot;, name: UIApplicationWillEnterForegroundNotification, 
        object: app)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と処理を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func applicationWillEnterForeground(notification: NSNotification) {
    println(__FUNCTION__)
    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;スリープに移行時:205901421f8bb17c75d7ebf5b8a21af9&#34;&gt;スリープに移行時&lt;/h2&gt;

&lt;p&gt;逆にスリープに入る時には復帰時と同じで、&lt;code&gt;ApplicationWillEnterForeground&lt;/code&gt; の代わりに &lt;code&gt;ApplicationDidEnterBackground&lt;/code&gt; を使えば良い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; NSNotificationCenter.defaultCenter().addObserver(self, selector: &amp;quot;applicationDidEnterBackground:&amp;quot;, name: UIApplicationDidEnterBackgroundNotification, object: app)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>クラスが読み込めず [解決]</title>
      <link>http://goozenlab.com/blog/2015/03/load-managedobject/</link>
      <pubDate>Fri, 20 Mar 2015 10:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/load-managedobject/</guid>
      <description>

&lt;p&gt;もう、わざわざ動いている物をSwiftに移行するのも止めてしまおうか。どうせならAndroidに移植する方がまだよいか、、と思ってしまうほどでしたが、&lt;a href=&#34;http://goozenlab.com/blog/2015/03/unable-to-load-class/&#34;&gt;クラスが読み込めず&lt;/a&gt;で書いた問題が解決しました。&lt;/p&gt;

&lt;p&gt;問題のエラーログ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CoreData: warning: 
Unable to load class named &#39;Item&#39; for entity &#39;Item&#39;.  
Class not found, using default NSManagedObject instead.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もしかしたらXcode6.2では問題でなくなっているかもしれませんが、とりあえず解決方法は以下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-20-class-unload1.png&#34; alt=&#34;Class unload1&#34; /&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;xcdatamodeldファイルを選択&lt;/li&gt;
&lt;li&gt;CONFIGURATIONSを選択&lt;/li&gt;
&lt;li&gt;右に出てくるEntitiies以下のClass名を&lt;code&gt;ディレクトリー名.Entity名&lt;/code&gt;にする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-20-class-unload2.png&#34; alt=&#34;Class unload2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;※ 注意点は上記の場合&lt;code&gt;kitchen.Item&lt;/code&gt;では無く&lt;code&gt;tapas.Item&lt;/code&gt;と、xcdatamodeld名では無く、ディレクトリ名を入れる事。見事にハマりました。&lt;br /&gt;
（散歩中に「もしや、ディレクトリー名では。。」と閃きました。なんでわざわざ&lt;code&gt;kitchen.xcdatamodeld&lt;/code&gt;という名前にしているのかは、自分で作ったのに不明。なんで余計な事をする？と自分に問い詰めたい。。）&lt;/p&gt;

&lt;h2 id=&#34;うまく行かない場合:dada94b1ca17e9c7da1ee195804dcefb&#34;&gt;うまく行かない場合&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;キャッシュをクリアーする&lt;/li&gt;
&lt;li&gt;DerivedDataのデーターを消す&lt;/li&gt;
&lt;li&gt;新しいプロジェクトを作って、Modelを移行して試す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;※ 使っていたプロジェクトのままで動いた場合と（tapas)、キャッシュやDerivedDataのデーターを抜いてもうまく行かず、新しいプロジェクトを作り直してうまく行く場合がありました（ohaYo)。&lt;/p&gt;

&lt;p&gt;蛇足：ネットでぱっと見て試すもうまく行かず、後で読み返すとその注意点が書いてあったりします。
小学校の通信簿に「少し聞いただけで、全部理解したと思ってしまうところがあります。もう少しじっくりと。（やれどーだこーだ）。」書いてあった事をふと思い出す。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NSLocalizedString on swift</title>
      <link>http://goozenlab.com/blog/2015/03/nslocalizedstring-swift/</link>
      <pubDate>Thu, 19 Mar 2015 11:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/nslocalizedstring-swift/</guid>
      <description>&lt;p&gt;NSLocalizedStringでエラーがでる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSLocalizedString(&amp;quot;Timer&amp;quot;, comment: nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nil&lt;/code&gt;を&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;空白に変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSLocalizedString(&amp;quot;NavigationBar.Button.Timer&amp;quot;, comment: &amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Swiftではnilの扱いがちょっと掴めず、、至る所で問題になってる。。&lt;/p&gt;

&lt;p&gt;ついでに中に入れる文言をかえる。以前は普通に&lt;code&gt;&amp;quot;Timer&amp;quot;&lt;/code&gt;と書いていたところを今回からはドコゾの何某か分かるように&lt;code&gt;&amp;quot;NavigationBar.Button.Timer&amp;quot;&lt;/code&gt;と少し詳しく書き込むようにする。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>delegate on swift</title>
      <link>http://goozenlab.com/blog/2015/03/delegate-swift/</link>
      <pubDate>Wed, 18 Mar 2015 11:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/delegate-swift/</guid>
      <description>

&lt;h2 id=&#34;デレゲートするクラス:b75dbc75cf3a32d046705843360e6789&#34;&gt;デレゲートするクラス&lt;/h2&gt;

&lt;p&gt;以下の３つを書き加えればよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol MainHeaderViewDelegate {
    func sleepingTimerDidFinish(controller: MainHeaderView)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;var delegate:MainHeaderViewDelegate? = nil
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; self.delegate!.sleepingTimerDidFinish(self)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;デレゲートで値を受け取るクラス:b75dbc75cf3a32d046705843360e6789&#34;&gt;デレゲートで値を受け取るクラス&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MainHeaderViewDelegate&lt;/code&gt; と、functionを追加、処理を書き込みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MainViewController: UIViewController, MainHeaderViewDelegate {

   //////

   func sleepingTimerDidFinish(controller: MainHeaderView) {
        // 処理
    }

   /////
   
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※ ソースは拙作のohayoからコピペ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UIButttonをSwiftで書く</title>
      <link>http://goozenlab.com/blog/2015/03/uibutton-swift/</link>
      <pubDate>Tue, 17 Mar 2015 08:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/uibutton-swift/</guid>
      <description>&lt;p&gt;UIButttonをSwiftでプログラム的に書くと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buttonMoodExecelent = UIButton.buttonWithType(UIButtonType.Custom) as UIButton
buttonMoodExecelent.frame = CGRect(x: 0, y: 0, width: 30, height: 30)
buttonMoodExecelent.tag = TagButtonMood.Execelent
buttonMoodExecelent.addTarget(self, action: &amp;quot;selectedMood:&amp;quot;, forControlEvents: .TouchUpInside)
buttonMoodExecelent.setBackgroundImage(UIImage(named: &amp;quot;MoodExecelent&amp;quot;), forState: UIControlState.Normal)

self.vew.addSubview(buttonMoodExecelent)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テキストタイトルの時には&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buttonCancel.setTitle(&amp;quot;cancel&amp;quot;, forState: UIControlState.Normal)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テキストの色を変えるには、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buttonCancel.setTitleColor(UIColor.redColor(), forState: .Normal)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もっと細かく、フォント等も弄りたい時には、&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setAttributedTitle:forState&lt;/code&gt;を使うとさ。&lt;/p&gt;

&lt;p&gt;※ ソースは拙作のohayoからコピペ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ohayo のデザイン</title>
      <link>http://goozenlab.com/blog/2015/03/ohayo-pop/</link>
      <pubDate>Mon, 16 Mar 2015 08:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/ohayo-pop/</guid>
      <description>&lt;p&gt;Swiftへの移行のついでにちょっとohayoのデザインに手を入れてます。ちょっとポップな感じにしようかな。。と。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-15-ohayo3.png&#34; alt=&#34;Pop ohayo&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-15-ohayo4.png&#34; alt=&#34;Pop ohayo&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>！Thanks alot for downloading Sati！</title>
      <link>http://goozenlab.com/blog/2015/03/thanx-dowload-sati/</link>
      <pubDate>Sun, 15 Mar 2015 23:50:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/thanx-dowload-sati/</guid>
      <description>&lt;p&gt;!! Obligado, ขอบคุณ, teşekkür ederim, शुक्रिया., Danke, Merci, Gracias, Спасибо, אַ דאַנק, شكرا !!&lt;/p&gt;

&lt;p&gt;Satiのダウンロードがドカーーンと一気に増えました。ダンンャバーッ。たまにどかっとダウンロードが増える事があっても500ぐらいが頭打ちでしたが今回は14,600ダウンロードと桁違い、、ちとビックリです。エラーも無いしちょっと安心。おかげさまで、ダウンロードグラフが見づらくなりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-15-sati-download.png&#34; alt=&#34;Sati Download&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;・ 通常時のサティダウンロード：3とかたまに二桁 &amp;mdash;&amp;ndash;&amp;gt; 3/13：42 &amp;mdash;&amp;gt; 3/14：14,600。&lt;/p&gt;

&lt;p&gt;どこかしらで、紹介されたのだろうけど、アプストアーか？かなり影響力のある人？なのでしょうか、すごいです。▲&amp;gt;999%とアップの限界値。&lt;/p&gt;

&lt;p&gt;ダウンロードの詳細は以下。USとCanadaが2Kダウンロードずつと飛び抜けてて、ブラジル、メキシコ、タイと続きます。眠れる巨人、中国ではダウンロードされていない様子。トルコがヨーロッパ圏で一番なのがちょっと意外。カザフスタンとか不思議でもある、行ってみるかな。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-15-sati-world.png&#34; alt=&#34;Sati Download&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-15-sati-europe.png&#34; alt=&#34;Sati Download&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-15-sati-southamerica.png&#34; alt=&#34;Sati Download&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-15-sati-asia.png&#34; alt=&#34;Sati Download&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-15-sati-asia-east.png&#34; alt=&#34;Sati Download&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;!! Thanks again, Obligado, ขอบคุณ, teşekkür ederim, शुक्रिया., Danke, Merci, Gracias, Спасибо, אַ דאַנק, شكرا !!&lt;/p&gt;

&lt;p&gt;thank you very much for downloading sati.&lt;br /&gt;
please be meditation part of your life, into a life. i hope meditation will help nourishing on compassion within us.&lt;/p&gt;

&lt;p&gt;あとは、皆さん瞑想続けてくださいね。というか、英語のREAMEを書き換えなければ。。。ローカライズがボロボロなんですよね。。。&lt;/p&gt;

&lt;p&gt;感謝。&lt;/p&gt;

&lt;p&gt;追記：&lt;br /&gt;
3/18：いつものパターンのホップ・ステップ・玉砕。ダウンロード数が急降下。システムエラーだったのか？と思わせるくらいです。&lt;br /&gt;
3/16：一日たち25.2Kダウンドード。南米、アフリカでは下降線で、ヨーロッパ、アメリカはまだのびる！&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-16-sati-world.png&#34; alt=&#34;Sati Download&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Xcode 6.1とiOS8.2</title>
      <link>http://goozenlab.com/blog/2015/03/xcode611-ios82/</link>
      <pubDate>Sun, 15 Mar 2015 17:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/xcode611-ios82/</guid>
      <description>&lt;p&gt;検証機を何の迷いも無くiOS8.2にアップデートする。&lt;/p&gt;

&lt;p&gt;で、XCodeにてアプリをビルドしインストールしようと思ったら、、、、できん。。
このXCodeではサポートしないとの親切なエラーメッセージがでる。新しいバージョンのXCodeをインストールするにも、今いるネパールのネット環境ではXcode:2.58GBを落とすのにかなり時間がかかりそう。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-14-ios82.png&#34; alt=&#34;Xcode 6.1 with ios8.2&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;まぁ仕方ない。。タイもしくはインドに行くまで、シミュレータでしのぐしか無いな。。&lt;/p&gt;

&lt;p&gt;と思ったが、取りあえず試す。（随時アップデート）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2015-03-15 17:30　ルーターとの接続が10分おきに切れる。で、諦める。&lt;/li&gt;
&lt;li&gt;2015-03-15 13:00　再開するも、ダウンロードにはXCodeを落とせと、、で最初からやり直しになる。。&lt;/li&gt;
&lt;li&gt;2015-03-15 06:00　停電中&lt;/li&gt;
&lt;li&gt;2015-03-14 22:45　ルーターの電源を切られる。&lt;/li&gt;
&lt;li&gt;2015-03-14 22:16　59MB 残り７時間くらいと表示&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>StatusBarをSwiftで隠す</title>
      <link>http://goozenlab.com/blog/2015/03/statusbar-swift/</link>
      <pubDate>Sun, 15 Mar 2015 08:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/statusbar-swift/</guid>
      <description>&lt;p&gt;iOSやXCodeのバーションが上がったりすると必ず分からなくなる。statusbarの扱い。&lt;/p&gt;

&lt;p&gt;iOS8とswiftでは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;override func prefersStatusBarHidden() -&amp;gt; Bool {
    return true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加するだけで良い。んっ、こんだけ？だったけ？？問題無く動いているようなので、不問。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA 14 CEとJavaSE</title>
      <link>http://goozenlab.com/blog/2015/03/intellij-setup/</link>
      <pubDate>Sat, 14 Mar 2015 12:30:00 +0545</pubDate>
      <author>goozenlab@gmail.com (jin)</author>
      <guid>http://goozenlab.com/blog/2015/03/intellij-setup/</guid>
      <description>

&lt;p&gt;Androidの制作を始めて見ようかなとここ数ヶ月思っていてAndroidStudioとかもインストールはしてみたもののなかなか気が向きませんでした。（Javaがどうもねぇ〜。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-09-intellij.png&#34; alt=&#34;IntelliJ&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;最近、サイトのブログエンジンを変更するにあたって色々とリサーチをしていて、goLangやKotlinという新しい言語の事を知る。そしてそのKotlinという言語は見た目すごくSwiftに似ている。しかもアンドロイドのアプリも作れるらしい。
「これはSwiftのついでに両方勉強すれば一石二鳥では、あわよくばアプリを移植できるかも、、、」と軽率な考えにおされ、Kotlin の開発元から出ているIDE、しかもAndroidStudioの元になっているIntelliJ IDEA でやってみるべと、、ちょっとスウィッチが入りました。&lt;/p&gt;

&lt;p&gt;ダウンロードする物は以下の４つ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;IntelliJ IDEA（無料版）：&lt;a href=&#34;http://www.jetbrains.com/idea/download/&#34;&gt;ダウンロードサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Android SDK：&lt;a href=&#34;http://developer.android.com/sdk/index.html&#34;&gt;ダウンロードサイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kotlin： IntelliJ IDEA の pluginsよりインストール。&lt;/li&gt;
&lt;li&gt;GoLang Plugin：&lt;a href=&#34;https://github.com/go-lang-plugin-org/go-lang-idea-plugin/releases/tag/%23164&#34;&gt;ダウンロードサイト&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;intellij-idea:6ffa665a054ca576a7ab1f56231855e0&#34;&gt;IntelliJ IDEA&lt;/h2&gt;

&lt;p&gt;ダウンロードして立ち上げると、Javaはオラクルのものが既にダウンロードされているにもかかわらずJavaSEが必要とのアラートが上がる。(Not Now) をおしキャンセルする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-10-intellij-java-alert.png&#34; alt=&#34;alert to download Java&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;以前AndroidStudioをインストールした時と同じ問題で、これはちょこっとアプリのパッケージに入り込んで &lt;code&gt;info.plist&lt;/code&gt;を修正します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-10-intellij-infopilst.png&#34; alt=&#34;info.plist&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;色が反転している所を書き換え（写真は書き換え済みで、元は&lt;code&gt;1.6*&lt;/code&gt;）るとすぅーーっと起動します。でも、これだと、アップデートした時にまた書き直さなければいけないのか？？&lt;/p&gt;

&lt;h2 id=&#34;android-sdk:6ffa665a054ca576a7ab1f56231855e0&#34;&gt;Android SDK&lt;/h2&gt;

&lt;p&gt;次にダウンロードした &lt;code&gt;android-sdk_r24.0.2-macosx&lt;/code&gt; は解凍し所定の場所に保存します。(AndroidStudioでは&lt;code&gt;~/Library/Android/sdk/&lt;/code&gt;の中がデフォルトのようです）そして、&lt;code&gt;/インストール先/tools/android update sdk&lt;/code&gt; を実行して必要なファイルをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ インストールのディレクトリ/android-sdk-macosx/tools/android update sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;kotlin:6ffa665a054ca576a7ab1f56231855e0&#34;&gt;Kotlin&lt;/h2&gt;

&lt;p&gt;もう一丁、&lt;code&gt;Kotlin&lt;/code&gt; をpluginsより入れる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://goozenlab.com/images/2015-03-09-intellij-kotlin.png&#34; alt=&#34;Kotlin Install&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;golang-plugin:6ffa665a054ca576a7ab1f56231855e0&#34;&gt;GoLang Plugin&lt;/h2&gt;

&lt;p&gt;おまけに、ダウンロードした &lt;code&gt;Go.164.zip&lt;/code&gt; を plugins から読み込みます。&lt;/p&gt;

&lt;p&gt;これで、一端な2015年Android開発環境が整いました。さぁーー、何から始めよう。。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>